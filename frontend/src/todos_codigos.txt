=== /home/ikemh/projetos/my-ecommerce/frontend/src/app/api/services/notifications.js ===
// frontend/src/app/api/services/notifications.js

/**
 * Fun√ß√£o para enviar email de confirma√ß√£o de pedido para o administrador
 */
export async function sendOrderEmailToAdmin(orderId, orderData, strapiToken) {
  try {
    // Enviar solicita√ß√£o para o endpoint do Strapi que lidar√° com o envio de email
    const response = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/api/email/send-order-notification`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${strapiToken}`,
        },
        body: JSON.stringify({
          orderId,
          orderData,
        }),
      }
    );

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Falha ao enviar notifica√ß√£o de email");
    }

    return await response.json();
  } catch (error) {
    console.error("Erro ao enviar email:", error);
    // N√£o lan√ßamos o erro para n√£o interromper o fluxo principal
    return { success: false, error: error.message };
  }
}

/**
 * Fun√ß√£o para preparar o link do WhatsApp para o administrador
 */
export function generateWhatsAppLink(orderId, customer, cartItems, total) {
  try {
    // N√∫mero do administrador (com c√≥digo do pa√≠s e DDD)
    const adminWhatsApp = process.env.ADMIN_WHATSAPP || "5511999999999";

    // Formatar a mensagem para WhatsApp
    const itemsList = cartItems
      .map(
        (item) =>
          `üî™ *${item.title}* √ó ${item.quantity}: R$ ${(
            item.price * item.quantity
          ).toFixed(2)}`
      )
      .join("\n");

    // Criando mensagem completa com formata√ß√£o para WhatsApp
    const message =
      `üî™ *NOVO PEDIDO #${orderId}*\n\n` +
      `*Cliente:* ${customer}\n` +
      `*Data:* ${new Date().toLocaleDateString("pt-BR")}\n\n` +
      `*ITENS DO PEDIDO:*\n${itemsList}\n\n` +
      `*TOTAL:* R$ ${total.toFixed(2)}\n\n` +
      `Acesse o painel admin para mais detalhes.`;

    // URL codificada para abrir diretamente o WhatsApp
    const encodedMessage = encodeURIComponent(message);
    return `https://api.whatsapp.com/send?phone=${adminWhatsApp}&text=${encodedMessage}`;
  } catch (error) {
    console.error("Erro ao gerar link do WhatsApp:", error);
    return null;
  }
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/app/api/submitOrder/route.js ===
// frontend/src/app/api/submitOrder/route.js
import { NextResponse } from "next/server";
import {
  sendOrderEmailToAdmin,
  generateWhatsAppLink,
} from "../services/notifications";

export async function POST(request) {
  try {
    // 1) L√™ o payload do front
    const { customer, email, phone, address, cartItems } = await request.json();

    // 2) Gera o resumo no formato Blocks em vez de Markdown
    const total = cartItems.reduce(
      (sum, item) => sum + item.price * item.quantity,
      0
    );

    const headerBlock = {
      type: "heading",
      level: 3,
      children: [{ type: "text", text: "Resumo do Pedido", bold: true }],
    };

    // Bloco de informa√ß√£o do cliente
    const customerBlock = {
      type: "paragraph",
      children: [
        { type: "text", text: "üë§ ", italic: true },
        { type: "text", text: "Cliente: ", bold: true },
        { type: "text", text: customer },
      ],
    };

    // Cabe√ßalho da se√ß√£o de itens
    const itemsHeaderBlock = {
      type: "heading",
      level: 4,
      children: [{ type: "text", text: "Itens do Pedido" }],
    };

    // Blocos para cada item com emoji de faca
    const itemBlocks = cartItems.map((item) => {
      return {
        type: "paragraph",
        children: [
          { type: "text", text: "‚û°Ô∏è " },
          { type: "text", text: item.title, bold: true },
          { type: "text", text: ` √ó ${item.quantity}`, italic: true },
          { type: "text", text: "\n    " }, // Indenta√ß√£o
          {
            type: "text",
            text: `R$ ${(item.price * item.quantity).toFixed(2)}`,
          },
        ],
      };
    });

    // Bloco para o total estilizado
    const totalBlock = {
      type: "heading",
      level: 5,
      children: [
        { type: "text", text: "Total: ", bold: true },
        { type: "text", text: `R$ ${total.toFixed(2)}` },
      ],
    };

    // Data do pedido
    const dateBlock = {
      type: "paragraph",
      children: [
        { type: "text", text: "üìÖ " },
        { type: "text", text: "Data: ", bold: true },
        {
          type: "text",
          text: new Date().toLocaleDateString("pt-BR", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          }),
        },
      ],
    };

    // Estrutura completa do resumo no formato de blocos
    const resumo = [
      headerBlock,
      customerBlock,
      dateBlock,
      itemsHeaderBlock,
      ...itemBlocks,
      totalBlock,
    ];

    console.log("Resumo gerado:", JSON.stringify(resumo, null, 2));

    // 3) Cria o Pedido, incluindo o campo resumo
    const orderRes = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/api/pedidos`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${process.env.STRAPI_API_TOKEN}`,
        },
        body: JSON.stringify({
          data: {
            cliente: customer,
            email: email,
            telefone: phone,
            endereco: {
              rua: address.street,
              bairro: address.neighborhood,
              cidade: address.city,
              estado: address.state,
              numero: address.number,
              complemento: address.complement,
            },
            resumo,
          },
        }),
      }
    );

    if (!orderRes.ok) {
      const err = await orderRes.json();
      console.error("Erro ao criar pedido:", err);
      return NextResponse.json(
        { error: err.error || err.message || "Falha ao criar pedido" },
        { status: orderRes.status }
      );
    }
    const { data: orderData } = await orderRes.json();

    // 4) Cria cada Item do Pedido ligado ao pedido
    const createItem = (item) =>
      fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/item-do-pedidos`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${process.env.STRAPI_API_TOKEN}`,
        },
        body: JSON.stringify({
          data: {
            quantidade: item.quantity,
            preco: item.price,
            produto: parseInt(item.id) + 1,
            pedido: orderData.id,
          },
        }),
      });

    const results = await Promise.all(cartItems.map(createItem));
    const failed = results.find((r) => !r.ok);
    if (failed) {
      const err = await failed.json();
      console.error("Erro ao criar item do pedido:", err);
      return NextResponse.json(
        { error: err.error || err.message || "Falha ao criar item" },
        { status: failed.status }
      );
    }

    try {
      // Preparar dados completos do pedido
      const orderCompleteData = {
        id: orderData.id,
        customer,
        email,
        phone,
        address,
        cartItems,
        total,
      };

      // Enviar email via API do Strapi
      await sendOrderEmailToAdmin(
        orderData.id,
        orderCompleteData,
        process.env.STRAPI_API_TOKEN
      );

      // Gerar link para WhatsApp
      const whatsappLink = generateWhatsAppLink(
        orderData.id,
        customer,
        cartItems,
        total
      );

      console.log("Notifica√ß√µes enviadas com sucesso");
    } catch (notifError) {
      // N√£o interrompe o fluxo se as notifica√ß√µes falharem
      console.error("Erro ao enviar notifica√ß√µes:", notifError);
    }

    // 6) Retorna sucesso
    return NextResponse.json(
      {
        message: "Pedido e itens criados com sucesso",
        order: orderData,
      },
      { status: 201 }
    );
  } catch (err) {
    console.error("submitOrder error:", err);
    return NextResponse.json(
      { error: err.message || "Erro ao processar o pedido." },
      { status: 500 }
    );
  }
}

// Bloqueia GET nessa rota
export async function GET() {
  return NextResponse.json({ error: "M√©todo n√£o permitido" }, { status: 405 });
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/app/checkout/page.jsx ===
// src/app/checkout/page.jsx

"use client";
import React, { useState } from "react";
import { useCart } from "@/context/CartContext";
import { useRouter } from "next/navigation";
import CheckoutLayout from "@/components/CheckoutLayout/CheckoutLayout";

export default function CheckoutPage() {
  const { items, clearCart } = useCart();
  const router = useRouter();

  const [customer, setCustomer] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [loading, setLoading] = useState(false);

  // Fun√ß√µes para atualizar os valores dos estados
  const handleCustomerChange = (value) => setCustomer(value);
  const handleEmailChange = (value) => setEmail(value);
  const handlePhoneChange = (value) => setPhone(value);

  // C√°lculo do total
  const total = items.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0
  );

  const handleSubmit = async (orderData) => {
    setLoading(true);

    try {
      const res = await fetch("/api/submitOrder", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderData),
      });
      const result = await res.json();
      alert(result.message);
      clearCart(); // Limpa o carrinho ap√≥s sucesso
      router.push("/success"); // Redireciona para p√°gina de sucesso
    } catch (error) {
      alert("Erro ao enviar pedido.");
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <CheckoutLayout
      items={items}
      total={total}
      customer={customer}
      email={email}
      phone={phone}
      loading={loading}
      onCustomerChange={handleCustomerChange}
      onEmailChange={handleEmailChange}
      onPhoneChange={handlePhoneChange}
      onSubmit={handleSubmit} // Passando a fun√ß√£o de submit para o CheckoutLayout
    />
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/app/favicon.ico ===
         (  F          (  n  00     (-  ñ         ç  æF  (                                                           $   ]   ∫   ∫   ]   $                                       †   Ú   ˇ   ˇ   ˇ   ˇ   Ú   †                           8   ‡   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‡   8                  ‚   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‚              °   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   °       #   Ù   ˇ   ˇOOOˇÆÆÆˇ´´´ˇ´´´ˇ´´´ˇ´´´ˇ≠≠≠ˇgggˇ   ˇ   ˇ   Ù   #   Y   ˇ   ˇ   ˇˇÌÌÌˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇ555ˇ   ˇ   ˇ   ˇ   Y   ª   ˇ   ˇ   ˇ   ˇkkkˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇéééˇ   ˇ   ˇ   ˇ   ˇ   ª   ª   ˇ   ˇ   ˇ   ˇ			ˇÕÕÕˇˇˇˇˇˇˇˇˇ‰‰‰ˇˇ   ˇ   ˇ   ˇ   ˇ   ª   Y   ˇ   ˇ   ˇ   ˇ   ˇJJJˇ˝˝˝ˇˇˇˇˇkkkˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Y   #   Ù   ˇ   ˇ   ˇ   ˇˇ∂∂∂ˇ’’’ˇ			ˇ   ˇ   ˇ   ˇ   ˇ   Ù   #       °   ˇ   ˇ   ˇ   ˇ   ˇ111ˇDDDˇ   ˇ   ˇ   ˇ   ˇ   ˇ   °              ‚   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‚                  8   ‡   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‡   8                           †   Ú   ˇ   ˇ   ˇ   ˇ   Ú   †                                       $   ]   ∫   ∫   ]   $                                                                                                                                                                                                                                                                                    (       @                                                                               ,   U   Å   Ë   Ë   Å   U   ,                                                                                      *   Ö   “   ˘   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˘   “   Ö   *                                                                      ñ   Û   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Û   ñ                                                          Q   ·   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ·   Q                                               r   ˚   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˚   r                                       r   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   r                               O   ˚   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˚   O                          ‰   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   „                      ó   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ó               (   ı   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Ù   '           Ü   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ888ˇãããˇàààˇàààˇàààˇàààˇàààˇàààˇàààˇàààˇàààˇàààˇàààˇàààˇâââˇ___ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Ü          ‘   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇÓÓÓˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇSSSˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‘      +   ˙   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇhhhˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÆÆÆˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˙   +   T   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇÀÀÀˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÙÙÙˇ,,,ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   T   Ç   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇGGGˇ˝˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇçççˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Å   È   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ≠≠≠ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ‰‰‰ˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   È   È   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ+++ˇÛÛÛˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇjjjˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   È   Å   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇãããˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÃÃÃˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Ç   T   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇ„„„ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇIIIˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   T   +   ˙   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇhhhˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇØØØˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˙   +      ‘   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇÀÀÀˇˇˇˇˇˇˇˇˇÙÙÙˇ,,,ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‘          Ü   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇGGGˇ˝˝˝ˇˇˇˇˇçççˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Ü           '   Ù   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ±±±ˇÏÏÏˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ı   (               ó   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ333ˇ___ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ó                      „   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‰                          O   ˚   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˚   O                               r   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   r                                       r   ˚   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˚   r                                               Q   ·   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ·   Q                                                          ñ   Û   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Û   ñ                                                                      *   Ö   “   ˘   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˘   “   Ö   *                                                                                      ,   U   Å   Ë   Ë   Å   U   ,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (   0   `           -                                                                                             	   (   L   j   ≥   ¯   ˜   ≥   j   K   (   	                                                                                                                                          V   †   ÿ   ¯   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ¯   ÿ   †   U                                                                                                                      %   ã   ·   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ·   ã   &                                                                                                      ã   Ô   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Ô   ã                                                                                          Q   ‹   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‹   R                                                                              ä   ˛   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˛   ä                                                                     ≠   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ≠                                                             ∏   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ∏                                                     Æ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Æ                                              ä   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ä                                       P   ˝   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˝   O                                  ﬂ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ﬂ                              ã   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ã                       #   Ò   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Ò   #                   å   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ã                  ‰   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ$$$ˇhhhˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇeeeˇPPPˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‰              U   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇÎÎÎˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇsssˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   U           °   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇeeeˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÃÃÃˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   °       	   ⁄   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇ………ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇHHHˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ⁄   	   (   ˘   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇEEEˇ¸¸¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÆÆÆˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ¯   (   K   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ™™™ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÙÙÙˇ,,,ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   L   j   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ)))ˇÚÚÚˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇåååˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   j   ¥   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇàààˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ„„„ˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ≥   ¯   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇ···ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇiiiˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ¯   ¯   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇeeeˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÀÀÀˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ¯   ≥   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇ………ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇHHHˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ¥   j   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇEEEˇ¸¸¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÆÆÆˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   j   L   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ™™™ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÙÙÙˇ,,,ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   K   (   ¯   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ)))ˇÚÚÚˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇåååˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˘   (   	   ⁄   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇàààˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ„„„ˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ⁄   	       °   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇ···ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇiiiˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   °           U   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇeeeˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÃÃÃˇˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   U              ‰   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇˇ………ˇˇˇˇˇˇˇˇˇ˝˝˝ˇHHHˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‰                  ã   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇEEEˇ¸¸¸ˇˇˇˇˇÆÆÆˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   å                   #   Ò   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ¨¨¨ˇ˚˚˚ˇ,,,ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Ò   #                       ã   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ222ˇ}}}ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ã                              ﬂ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ﬂ                                  O   ˝   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˝   P                                       ä   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ä                                              Æ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Æ                                                     ∏   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ∏                                                             ≠   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ≠                                                                     ä   ˛   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˛   ä                                                                              R   ‹   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ‹   Q                                                                                          ã   Ô   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   Ô   ã                                                                                                      &   ã   ·   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ·   ã   %                                                                                                                      U   †   ÿ   ¯   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ˇ   ¯   ÿ   †   V                                                                                                                                          	   (   K   j   ≥   ˜   ¯   ≥   j   L   (   	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        âPNG

   IHDR         \r®f   sRGB ÆŒÈ   8eXIfMM *    ái            †       †           D"8s  IDATxÌ]	∞’ônî]<QVAñËƒh$	 Nåé13*àq∞¬d™ƒç©I°àòDìL2ì™(Œ(‘ò2÷ƒô—G	ã¡q_@Â±à‡Üäx»õÔª–èæè{o˜ΩΩù”˝˝Uﬂ{}ªOüÂ;Áˇ˚Ù˘œ9›¬ëdÅÅÆ(Dg†–8	ËÙN ∫]ÄÓ@†hx•?v ¿N‡3‡=`;6.&∞‡u‚‡  ±î6âPÅ©–ΩÄ¡@ˇ√†R” P˘iZq ^DN„‡Äwpºÿº–X–h–òHg@¿Ã
:Ÿ‚|5` p"@¿'º…≤ôs{Îp¸*2¿ﬁçÖƒ d “Øåñ»|(0¯
0 ‡ì>KÚ
≥xX¨6 IJ» §C|?$KENÿ}œì|ä¬Úµ·‡ˆh $	2 êŸ|/ß¬è . Nz í#ºè√WÄe¿
‡5Ä„íêàè‹∂à˙‡;¿y ïæ Òg‡s©h^  Iƒ» DL(¢;∏8†“HjgÄcH|x†1†ÀR"åaÄÔÙ”Åï G¡Ÿ@ÖË9`/`%0ËHƒ@jΩ~,∞†€K
ü,t).ŒËIëàÅDËÅT¶O˚)~∫∞VÏÅu$b Ë™õ–U%•7ìÉç®õ˘ _…$b 8AÁ◊¿Äﬂ¯Jˆ3` 510wQÒ?§¯vr—·:¸2˛Kƒ@ §¯v*{%#ÌÇAÅZÄÂíÅ^(ıœ=Ò≥g \„¿WÉ€çÄ…!:‡ﬂ,`‡6˝œ643Å:@íc.FŸü§˘‰Äu?–<êê'·›ÄÉÄî_‹èvp: …8Qæõ
IÒ≈Å∑p{3ŒÛ–kH»¢åG°ûºïÆcÒ—º<ç62&ã
ê◊2uC¡ˇ‡⁄ÚÊï≠ﬂ‚§T¯3⁄
ΩÍÄõÖ;Óºî™dù/~mÄΩ.¯íX∆@{‰w.∞´d]Gï⁄ {lK‹‡Ebúˇ˝(P©RuM¸T€Cõ“⁄√¿d‰Ô])øå_Lm‡=ƒ˚=@búÕ˜KÄ€GUkŸ^úU”ÿ∆ÿ÷¯ö)1ÄÅ»ªg’T¢¬äØ∞m`9⁄\⁄Æ≥¿Q˛Õ@ÿ ‘˝‚∞ñ6:⁄û’^õw¨ùÚÔ∏EóD§¡ Á	¸5∞‡∫ÎƒF–,ﬂ‹
X"“dÄm<ÄnB~ÚÏ@¥∏˜µt◊tèxãª¸;⁄fﬁ>Òì™ÌI8µàªø8”∏C1€™$B∏ïßeÜ©›+˛íjl´‹EZ√«& © S:‚:ä6∞mˆÎ¥ˇ\G1•Á`¢®≈!ìnlªl√∆ä…^ÄQ`Ì∑@OcŸS∆ƒ@e∏Õ∑∫πÁ§qb™pïˇ„SÜƒ@upö∫±F¿D@Âø–ìø∫Ü¶–Ê2@#¿π∆ıL3 £Aíî$H2« _hû∂FH#rq(ÌˇO‡DÉÚ§¨àÅ®‡runGOWaÍbä &ñSgDÒ3¿EDÁtoß*«§ö˙°ƒ9kä›~)øï°,$¬ xøRü1òv‡K ·¿9ÄD‰çÅU(wÆ&LE“‰Í©ªÄS)πÈ3–Y8x8 $.iÄ(ÌåƒK¨≈ÄYúéÏa»]≠ó¥¿4îÙ«Ä	câìÆ≈@3∏f‡ÄÛï4∆ ∆¢Ñˇ–/*b‡¸˛ «˛ò$!IÄ~áÿ7…B*-1`	o ü ∫	ë$ª‡«°DãÅæâîLâà˚‡Úﬂ ÍJ"í‰¿OQ¢À)ïˆ2@#–x4â"$e ®¯∑Iˆ8í‡OiàÅ8¯"› ºG‰ﬁ8[xƒt<Ò.¥¥7&Çm&ÿéRç^ã≥tq˜ ÿï·.æß≈Y≈-2» Ωdß ˚„*_‹‡&d|j\ôWºb „ÙG˘ˆ´‚*gúØ £ëÈáÅƒF4„"IÒäÅÿÉ¥/ b1qÄN»„¿YÄDàÅpºå€9ÅÓ„p—}w\Ø Ûë‘§£ì”1 j`ÄËO˚üÓ≠xK=Ä—HÒ˜ ˜Aìà1ü#æ
D:U8j¿ı˝t˘©Î$b bûA||ÿUºQø¸26%™Ã)1 äËÖ_¿Í¢≥!~DŸ‡∫Êï ø‡+b >A¥‹:]—E$à£50êÚGDhR—tË–¡È›ªwR…)ùP« ëËn$ë 3‹÷Î@bSßNuñ,Y‚¥j’ ≤úÁ:ª°Ù‹;¿·¿ﬂÛ@£`«|„ñ-[)ì'OV˝Ÿ’Ü©sFx⁄Æì‚€•¯n}Õõ7Ø†¸¸≥~˝˙∆∫∫:ªå¿Qó©J_§ŒUKj8ñq0x‡∆;v4 Ãû=[ıhW=æ	›Î	§&∑!e5À8h—¢E„›wﬂ]§¸¸Ò·á6ˆÔﬂ_ıiW}˛SZ⁄?	ø/`ü;vl„æ}˚é2 <±h—" ª¿ß–AÓπë∏‹Å’X,„†m€∂ç+V¨(©¸<πwÔﬁ∆#F®^Ì™◊;ì÷˛aHc ˚‡î)S *ø{a˘ÚÂçp ÿc89(—^Äû˛ˆ4é&E¶€o√ÜÆûW¸/∑†u∆=±^Äû˛*?{k^∑_EÌ«≈˙˙zπÌ™gˆÜ UI-ãÅË{WU*
ú:p˚9.t⁄∑o(/›∫us>˚Ï3Áâ'û^ÅRgÄﬂ‰⁄ûG‚ÃI_DÆëªûçÂ‹~~Ω π≠{¯˙Ÿ?N0ë7ΩSÍÿ.∆ç◊∏ˇ~?}/y]nA;Íÿ£ã≥„2 ]ÒFOB2C?∑_I≠˜úî[–:∞:⁄=#¿OzKÈ-„ à€œ£Ô%Â¥Æ›?j–˛I¿ÆÜPç€Ø§Ê{N -hU›ˇtï:ôúÉò¯Åı ,‚†∑üG◊K -hU€Á¢cÉhP7 ˇŒ°¬ò¡@µn?ø\”-∏k◊.π˝à2„:ı˙ `Ÿ·FÑ€=˝-·†V∑_…GøÁ§‹ÇVÈ ›ı}¢0 WI˘≠™¯F∫˝ ≠ˆÛËsMárZ’8pJ∏Q‹*@OK8ÎˆÛ≥
rZ•‘›ña, ﬂ˚wÀ ÿSÈW^y•üáæ.∑†5Ìat7‘ÿ›è§¸÷Tv#›~7n≠‡A"∏¸ÚÀ’+¥£W¯ËpM¬≈/™hK8à“ÌÁg‰¥F/^Ñ∑´≈å¿M{e Ï®ËRõ|˙)qÿÎ7›tìÊ?8'‡µÄK˘ÌP~∫˝ÓπÁû∞˙\ı˝r⁄—>†«∑Uk ÿeP˜ﬂ|Î^x«ÈˆÛ≥
ã/V/¿¸vÚÙôØÙÅÂÑ‰¢*◊p‚v˚˘ π≠–æ ü]J˚À}êÛàk8(ïàŒ≈«¿ƒâù—£G«óÄOÃm⁄¥q,X†o˙îÚe.‚ò^ °Qx–”ﬂpít˚˘ı‰4^_ÉNó{‡Üæ¯≈yƒ2 Üsê§€œœ –-ÿπsgµs€Ã–iÍvëîZ8
!~PJ?åcÄ´˝Ó∫ÎÆ¿õ|∆] Æ‹Ω{∑≥zıÍ∏ìR¸µ1pn„‘‡zÔÌ•∫ºtlp˚9≥fÕr∫vÌjTÊÆø˛zﬂ4*O L„ã~ï¯—Áû‘ï3òÉ4›~~Ør≠;‘mÍxYå+¸¿ÄÄ°§ÌˆÛ3 r≠;‘mÍxì4‡˜≈:7]’ÅqLö4)U∑ü!r˙1îÍuÍ6øÏ’$Õ¿7õÆË¿8∫wÔÓÃô3«∏|5œ>?Ó\zÈ•ÕOÎ∑úÎÕÜ◊ ¯,ÔEõ≈¿å3úÅöï©2ππÂñ[ú∫∫∫2Wu:EæÇ¥õº^p.H1cJ∫t˚]}ı’BòuÈ‘SOuÆ∫äª…IcÄOêû•Úƒ%É  ∆AZ´˝¸¸¸Ækµ†ë∫D?«5 ﬁ@Q◊¿†ˇÈ3¿wÍ+Æ∏"˝åTôŒS¿ûUﬁ•‡13¿Ó?˚‚5 M'›ã˙ü>p˚˛Zµjï~fj»◊àÅ◊°‘êÇn©ÅÅ¶±>◊ ˇi5D§[bf Ì’~aã'∑`Xcπü„ -º1Ûk¢õΩˇƒÅI´˝¸ﬁ˜˝Ækµ†Q∫≈Ø|ÛkﬂMÀÈ(92»@ít∞…ÌÁ«›ÇX-ËL◊ìaÄ˙N4Äìq‹û'$f0@∑@VÑnAõ‹òY·ΩL9:‚|/^s« ˙ó	®”)0`Íjø∞T\w›uZ-ñƒËÓ¬®\†	@—:¶±cÌt˚˘ú{»-Ë«Rb◊˚1%◊ ÙI,Y%Të€›~áãr˙1îÿı¬CüÄ,º$ñ¥*ÀÄÈ´˝ f<‡π0z˛é•Ëh’F¸Ñ˚¶ ∑ü´˝|‚ÄØ8Z-ËCR¸óπùTg◊ –HRfÄãglYÌñ™πsÁ -ñƒp˜”'+é√ËÓ∂mµ_ÿígÕÕñèÓÁCø{ Ù	Ú√íî»™€œèŒô3g -ËGR|◊π7`GÄﬁÒ•°òÉ0êU∑ü_ŸµZ–è°ÿØüD†)¿±Û\>Å¨ª˝ ó¸–π˝äız Nñ§ƒ@÷›~~¥ -Ë«P¨◊{rsÄø¥@¨<óéúõ|.]∫‘∏|îŒm|g˚ıÎÁ¨_øﬁyÂïW‚KD1ób‡MΩî¢%°s\ì∑ü•r˙1ÀınÏ\ñ∆íÑ"-… ›`.4Ê€~%3ô‡I}[0A≤è$µì= -“>BH"GÆ€èç^rÑ≠<¬EBG›i ⁄%îòí9Ã@^›~~@´˝ä¸˙1‹ÏÄÜ@í t˚-[∂ÃËœ{%@CŸ$mAg¸¯ÒŒö5k Ü—Ö»¯úä/ÂèåOˇàlﬂ‰”øÑ·B–@.X∞¿±u‰p•O¸Ó6úóx≤9MPnø`ﬂ∑o_ßææ^n¡`tÖ
•ß(˙™ªôÉ\r˚˘s∆A“yÛÊÈ€Ç˛TÖ°@h
ÉE0lÿ0ÁŒ;Ôt⁄µ”òk∆∏N†°°¡YµjUê‡
S#Ï|^„Ω∫- |¢›p√Nó.Ö≠ÿﬁ•`◊^{≠zLÒ6ÉÉ4 üƒõÜbÁ®ˆeó]&"™dÄsŒú9Uﬁ•‡U0!¿¡*nP–*`óˇÊõo÷®vïºπ¡i8GçÂ˛‘ˇhh†ÿmúäÕÀ¿‰…ìùsœ=◊{J«U0¿’ÇÛÁœwZ∑Ê˛íà¯îÉÄÏõˆç8bEzÙË·,Y≤DÔ˛![Cü>}úç7:k◊Æìno∆¿fˆ >jvR?#bÄÉXà(∂¸F√ATæF’’iÛÍà[¡{Ï∞zvƒÁ>∫°Cá Ìa+ê[0B2èDµú=ÄÌG~Î(
¯ƒ∫Ò∆’ıèÇLO◊\sç‹Ç>"8|ã`[)
&Lp8¯'âñˆ‰åî”Ì4 oGeŒ#£€è¿lŸí_\ìDÕÄ‹Çë2Zÿl¢‹i¥9éåt‰»ë9f ﬁ¢À-øúºã=ÄùáYÃyçàn?uQ„Ø}XÕ¨ÕsAÔi >=å–1Ê=R…Ì+‡ +≠‹Ç°∏.2 öäKÏ´∑ﬂÙÈ”C∆¢€É20h– áÀ´%53¿5@ÖMAπ%ò¶◊Ã£„»ÌÇº∑j[ı‰9Œ;∏˚ _(Ø˙ßøµ0¿’~r˚’¬\∏{Ùm¡P¸‹ˇÆx#TT9æôn?æè ÌóN#†·ï◊•&Ó}◊ ¨Ø)
›TçVLØ!∏ﬂ‘j¡™Î`Ôp ﬂ8@Rr˚UAVåAÂ¨ö‹=∏„-ﬁÂÄ˜pLH™`@nø*»ä1®‹ÇUìÀı?}w ]ÏH2@∑ﬂ¥i”ÜV∞∏†[êÀØ%Å‡ÙˇÇÎﬂ5 ç8±)–≠
T`Äõ|rZbZ-∏.÷!da+@◊ ŒÁﬂûÛÄZÌgfê[0pΩºÊÜÙ û‰§ I¥…gr∏$∑†o%P«_rCy¿Vú|ﬂΩ†ˇ•‡"mÚYöŒ -Ë[ l⁄ƒk xA„ ¯ì€Ø9]¢[p“§IÂ»®¨pPì«œk ä∫FeŸêÃ»ÌgHE¯dÉnAm"Zñ$éı5}ÑõÇzÂ8¸êÈÙ2r¯Xõ|ñ ≈‡S‹ªwØ≥rÂJÉsôJ÷~ÅTõf˛z{ ÃÕ´ ˜êx–j?jµ‡QïE›nÚ js¿˘¡|Gêx–∑˝<dXt(∑‡QïE›.¨pØ47 ‹)˜¢˛;Öœysµ_´V≠DáÖ»-XTi‘Ì¢˝?õ Ü~ºËñúˇê€œÓ ∑`Q˝=VÙ?öÚ˙^‡
ÄÇπ∫˝ñ.]™|Xﬁ
Ùm¡B~Äø?ä∆¯Jı ﬁD†ó∑‰¸è‹~Ÿh rÍëÛˇ©€ER™¿ÖA›ÄÛäBÊÏ›~w‹qá”æ}˚úï<õ≈ï[–π5˚dÛ⁄-’`ò5 ?êKq›~l4íÏ0@∑‡)ßúíù/IÇÆ(ºú‡áÿã¸Ö•nŒÍ9π˝≤Y≥4Ëú!òCŸà2◊ó*w9¿Å¿GK›êısÓ&ür˚e≥¶s˙È∂?†6Ÿ8J  |(ÚuwO‰¥Åd∞&K)ánAæ ?Röç“n@7,∑∫8¡=ëıˇr˚eΩÜïèn¡Mõ69k◊ÚM7Û¬È˝∑Jï¥RÄ]Üe•n Í9π˝≤Z≥≈Â‚ /?·ûìo>å“Ûïæ§îrzr“¿ ÛÛ`ÂˆÛV{ˆèªuÎÊ4448´V≠ ra˜†p≥ ÓıQRZî<{‰dK.F9ïΩ#~T‚æ˚Ós.æ¯‚ÏN%*À ¿·√ùuÎ8G&ì≤•Ï/W:*x%·{√}@¶ ªÇlıııNc#ÁAIÚ¿¿±«õıiﬁ˜£À*?ÎÿØ¿0}ÄgÄ„˘C"ƒÄp€Ø≥Ääﬂ˚®4Ëñí“è(b¿8Ä_Q˘Yî Ä·Ór7'Äóà`∑ˇÓ ˘j ∏6‡Ö *å©3¿WˆgÉ‰"®‡l¢°¬à1ê:Ï±Sg}%» †	π•P?˜Ñ˛ã1`õê£Ø…Y– „‚é"ãÇD™0b@§∆ ›ˆÅîü9¨¶¿˝æ[t·âF1¿áÙp`k–\U”`ú‹R¯∑A#W81 e`)R€ZMä’ˆ ˜Ä[uÊâF0	rq.¿’Å•⁄ #^=C"ƒÄ9P'´R~fΩñ Ô
pnÄzdC"“e†¶ß?≥\KÄ˜Ω®@&$b }jz˙3€µˆ x/{Ëƒ1 RaÄ#ˇ|˜Á∆üUK≠= &ƒ^ÄÊTMπnë2¿9ˇ5)?s¶¿˚{O'ÛáDàÅD‡íﬂo [kM’oK0øxˇå ‹TdÇ_@]b rÊ ∆G√ƒ∂¿¥; ´ÄØÚáDàÅD‡Í‹1¿gaR€`⁄‹'`0à¬† â>\çÎ/˘ÑÒΩf–˘É¯Òê˜Ñé≈ÄàçÅﬂ!fn˜Z¢|büÜ‹U†.tÆÅÂ‡§ü—¿⁄r™9≈+Äõ˝ë≠Ä±Ó	˝b rnEåDkî= ÊÈ8‡è¿Ÿ¸!b RûCl„ÄPﬁEŸ`º‹åêKÜ'~ﬂ@â†À}*∞!`¯@¡¢6 LÙ†;¿ç	$b@D√¿?#ö»gﬁF˝
‡µVîà1év˝«;√EsÙ›Qπõ«Ã=…Æˆ4ø†ﬂb@T≈¿nÑ˛!πÚ3qº0^ VÄ„ c âµ1‹∂¥∂[˝ÔäÎ¿Mπ=8Ià›â’1@è⁄Ö@Cu∑∑`N∏o¿„ WJƒÄ∆ W˙—Â«e˜±IúØ n¶πN‡m‡ØÄ∏∆‹¥Ù_dÅÅ(ƒ4`E‹ÖI¬ ∞Øú"ÃµÀ1 *3+\˛EÂ —\M‚¿Õ)g	r¡ê¶
ªåËø8ö>ıøpÙ?vI“ ∞0Ä«Ä~¸!b†àÅ≠¯≈$'”%"IøìøéR˝¿iç1 é0∞á? S~&ù‘ ”rÖ‰í∆Ä§{ nÙ_òƒ¿»ÃL‡?íŒTÄe‰‘∆é¿7˘C"rŒ¿OQ~"qIÀ ∞†O 8ù?$b ß‹ãrˇ#@◊_‚ívºJÃôÇ£/πÈ3'd·/Å»÷˜W[§§õÁo'N¸lÛ˙-2Œ €¸Â@j O~”Ó0îÅ¿2` Hƒ@∆ÿÑÚù–+ñ™§›pOBÆ ﬁuOËø»(l„SÄ‘ïü¸¶9»ÙΩÚ~cﬂ:x/ËXdÑ.˘∞∆îÚòd »…V‡y@F $H2≈ ïüÔ¸+M*ïiÄ‹l8O@F $H2¡ ïüÂÆ2≠4& r¥PO¿¥÷¢¸‘¬Ä˚‰7N˘YS Û∂†¯¿YÉ1`„;ˇJS3n≤ g[Å'Åë@W@"la`32 n?'˚HB2p
ÓhƒÅmÄmu âêÅì◊j@F@ò‹V†ç≤≠Z!¶øxI‰î…ˇHÆyô—±)¸˘>¿ÂZ!6 ∫‡îaŒ`‰˛Ç¶ÃdDV$9fÄÎ˘	pMø6ªI®!LG:\LdrwPyÀ~˝P·ß%‘ÊïL3∆·7ÁTK—ƒAmÄmo|≥6©ü	3–È-“h J3øº?é67 ·∂yr∂çî"Ä˚˛‡g»Œ4. $±1¿˜˝_º[*ä∏&∏§òS/ıdq¥ŒÏ„‰â¡Cﬁ‚h ä3øº>ä6≈∂%±ÄÅ∂»„\Ä#¥RZq¶=lK|≈îX∆¿X‰WSàe j5 /°˝–”$±òÅ:‰˝v@ΩÇ†ÜÄŒ8–◊êdÑÅ1(áz2~F‡)¥˘ˆ3¢ÙÕã¡ﬁ¿lÄÆCøÜ†Î˘‚Ë#¥âõÌ=≤.\Lt? %— N$9b†% :‡˛É2˘‰Äu	 …1|-ò	ldÚ¡˜úút $b†¿@?¸•∑@Ü ªF‡c‘ÔœÅ^ÄDîdÄ[9˝‡†êzŸ‡Ääœ:
Hƒ@ æåP2v )~†¶Æ@ï‡¸Ôüz5∞«|Ä˙“øR´÷µ™‡¡|`#†W39ÿÇ∫·<Ó"-±0¿Ô\<Ïd“ÂÄu¿oGLz 1êúGp∞‡óçeíÂÄØdã .¯jHƒ@jÙF 3Äï@ c{s<ˇ˘J&	…@ãê˜Îˆb∏Ÿ¿wÅã  ≤ß ©ùn¡µ‡vú≤˚< âàÄàà,M;ú˚*p>p!0hH¸‡{=ïûª¸x‡]Iƒ» DLhôË⁄‚<'°åh8«@V ¡#Ô„òJˇ∞‡f˚ Iå» ƒHnÖ®˚„Wü}‡N∆t[uÚ$ü¢∞õÅßÅÂ ˛@í 2 	í]&)éÜ #Ä3àìÅ,	=%ØTÙ’¿k¿&‡  IâÄîà˜I∂Æ”≥ Ÿ[8	Ë	¥Lñ]»]tÔTgÅı¿6‡-@b2 UÜOV∫„: A?ÄØ} .iÓ|	‡xCú¬˜rvﬂw; Œ¿#Í>Èi 8_b82 ÜWPÄÏ—ıË Åé {'nØ·”8z;Ä∆§y›ésü ú√@•¶ºP°∑o|¬S˘ih $3ˇ@ﬂπjÏä·    IENDÆB`Ç
=== /home/ikemh/projetos/my-ecommerce/frontend/src/app/globals.css ===
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

/* embla-carousel setup */
.embla {
  width: 100%;
}

.embla__container {
  scroll-snap-type: x mandatory;
  transition: transform 0.1s ease-in-out;
}

.embla__slide {
  scroll-snap-align: center;
  cursor: pointer;
}

/* opcional: escondendo a scrollbar nativa */
.embla {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
.embla::-webkit-scrollbar {
  display: none;
}

/* globals.css */
.no-scrollbar::-webkit-scrollbar {
  display: none;
}
.no-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

/* esconde os spinners no Chrome, Edge, Safari */
input[type="number"].no-spinner::-webkit-outer-spin-button,
input[type="number"].no-spinner::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* esconde o spinner no Firefox */
input[type="number"].no-spinner {
  -moz-appearance: textfield;
}

/* Adicione isto no seu Tailwind ou CSS global */
.cep-mask {
  /* exibe o tra√ßo no :after quando h√° 5 caracteres */
  position: relative;
}
.cep-mask::after {
  content: attr(data-display);
  position: absolute;
  left: 0.75rem; /* padding interno */
  top: 50%;
  transform: translateY(-50%);
  color: #aaa;
  pointer-events: none;
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/app/layout.js ===
// src/app/layout.js
import { Geist, Geist_Mono, Roboto } from "next/font/google";
import "./globals.css";
import { CartProvider } from "@/context/CartContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const roboto = Roboto({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-roboto",
  display: "swap",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${roboto.variable} font-roboto antialiased`}
      >
        <CartProvider>{children}</CartProvider>
      </body>
    </html>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/app/page.js ===
// src/app/page.js
"use client";

import React, { useState } from "react";
import useCategories from "@/hooks/useCategories";
import NavBar from "@/components/NavBar";
import SideDrawer from "@/components/SideDrawer";
import CartDrawer from "@/components/CartDrawer";
import CategoryTitle from "@/components/CategoryCarousel/CategoryTitle";
import ProductsSection from "@/components/ProductsSection";
import FloatingCheckoutButton from "@/components/FloatingCheckoutButton";

export default function HomePage() {
  const { categories, selectedCategory, setSelectedCategory } = useCategories();
  const [isSideOpen, setIsSideOpen] = useState(false);
  const [isCartOpen, setIsCartOpen] = useState(false);

  const toggleSide = () => {
    // se estamos abrindo o side e o cart est√° aberto no mobile, fecha o cart
    if (
      !isSideOpen &&
      isCartOpen &&
      typeof window !== "undefined" &&
      window.innerWidth < 768
    ) {
      setIsCartOpen(false);
    }
    setIsSideOpen((open) => !open);
  };

  const toggleCart = () => {
    // se estamos abrindo o cart e o side est√° aberto no mobile, fecha o side
    if (
      !isCartOpen &&
      isSideOpen &&
      typeof window !== "undefined" &&
      window.innerWidth < 768
    ) {
      setIsSideOpen(false);
    }
    setIsCartOpen((open) => !open);
  };

  return (
    <div className="min-h-screen bg-[#202020] text-white pt-[10vh]">
      <NavBar onToggleDrawer={toggleSide} onToggleCart={toggleCart} />
      <SideDrawer
        isOpen={isSideOpen}
        onClose={() => setIsSideOpen(false)}
        categories={categories}
        selectedCategory={selectedCategory}
        setSelectedCategory={setSelectedCategory}
      />
      <CartDrawer isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />
      {/* Carrossel full-width, fora do padding do main */}
      <div className="w-full">
        <CategoryTitle
          categories={categories}
          selectedCategory={selectedCategory}
          onSelectCategory={setSelectedCategory}
        />
      </div>
      <main className="max-w-6xl mx-auto space-y-12 p-2 sm:p-6">
        <ProductsSection selectedCategory={selectedCategory} />
      </main>
      <FloatingCheckoutButton />
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/app/success/page.jsx ===
export default function SuccessPage() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center text-white bg-[#202020]">
      <h1 className="text-3xl mb-4">Pedido enviado com sucesso!</h1>
      <p>Em breve entraremos em contato via WhatsApp.</p>
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CartChangeToast.jsx ===
// src/components/CartChangeToast.jsx
"use client";

import React, { useEffect } from "react";
import { createPortal } from "react-dom";

export default function CartChangeToast({
  message,
  type = "success",
  onClose,
}) {
  // fecha automaticamente ap√≥s 2s
  useEffect(() => {
    const t = setTimeout(onClose, 2000);
    return () => clearTimeout(t);
  }, [onClose]);

  // cores suaves
  const bgClass =
    type === "success"
      ? "bg-black/75 backdrop-blur-lg border-green-400/20 text-green-400/80"
      : type === "error"
        ? "bg-black/75 backdrop-blur-lg border-red-400/20 text-red-400/80"
        : "bg-black/75 backdrop-blur-lg border-yellow-400/20 text-yellow-400/85";

  return createPortal(
    <div className="fixed top-20 w-80 left-1/2 transform -translate-x-1/2 z-50">
      <div
        className={`
          max-w-md
          ${bgClass}
          backdrop-blur-lg
          rounded-lg
          border
          px-4 py-2
          shadow-lg
          text-center
          font-medium
        `}
      >
        {message}
      </div>
    </div>,
    document.body
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CartDrawer.jsx ===
"use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import SimpleBar from "simplebar-react";
import "simplebar-react/dist/simplebar.min.css";
import { X } from "lucide-react";
import { useCart } from "@/context/CartContext";
import CartChangeToast from "./CartChangeToast";

export default function CartDrawer({ isOpen, onClose }) {
  const router = useRouter();
  const { items, removeItem } = useCart();
  const [toast, setToast] = useState(null);

  // calcula subtotal
  const subtotal = items.reduce((sum, i) => sum + i.price * i.quantity, 0);

  const handleRemove = (sku) => {
    removeItem(sku);
    setToast({ message: "Produto removido do carrinho!", type: "error" });
  };

  return (
    <div
      className={`z-40 fixed inset-0 ${isOpen ? "" : "pointer-events-none"}`}
      onClick={onClose}
    >
      <style jsx global>{`
        .cart-scrollbar .simplebar-track.simplebar-vertical {
          right: auto !important;
          left: 0 !important;
        }
      `}</style>

      <aside
        onClick={(e) => e.stopPropagation()}
        className={`
          fixed top-[8vh] right-0
          h-[100%] w-65 min-w-[40vh] max-w-[10rem]
          bg-[#1A1A1A]/70 backdrop-blur-lg
          border-l border-white/10
          origin-right transform transition-transform duration-350 md:top-[10vh] min-w-[40vh]
          ${isOpen ? "translate-x-0" : "translate-x-full"}
        `}
      >
        {/* Bot√£o de fechar */}
        <button
          onClick={onClose}
          aria-label="Fechar carrinho"
          className="z-50 cursor-pointer absolute top-[1vh] left-[1vh] text-white text-[4vh] focus:outline-none"
        >
          √ó
        </button>
        {/* Conte√∫do rol√°vel com classe espec√≠fica */}
        <SimpleBar
          style={{ maxHeight: "100%" }}
          className="mt-[6vh] pl-[0.5vh] pb-[40vh] cart-scrollbar"
        >
          {items.length === 0 ? (
            <p className="pl-[3vh] pt-[3vh] text-[3.5vh] text-[#dadada]">
              Carrinho vazio.
            </p>
          ) : (
            <ul>
              {items.map((i, idx) => (
                <li
                  key={i.sku}
                  className={`
                    flex items-center justify-between px-[1vh] py-[0.5vh]
                    border-b border-[#60606070]
                    ${idx === items.length - 1 ? "border-none" : ""}
                  `}
                >
                  <img
                    src={i.image}
                    alt={i.title}
                    className="h-[5.5vh] w-auto object-contain rounded"
                  />
                  <div className="flex-1 ml-[2.1vh]">
                    <div className="font-semibold text-[2.3vh] text-white">
                      {i.title}
                    </div>
                    <div className="text-[2.1vh] text-[#DADADA]">
                      {i.material}
                    </div>
                    <div className="text-[2vh] text-white mt-[0.5vh]">
                      x{i.quantity} ¬∑ R$ {(i.price * i.quantity).toFixed(2)}
                    </div>
                  </div>
                  <button
                    onClick={() => handleRemove(i.sku)}
                    aria-label="Remover item"
                    className="text-red-400 hover:text-red-500/80 p-1 cursor-pointer"
                  >
                    <X className="h-[auto] w-[2.5vh]" />
                  </button>
                </li>
              ))}
            </ul>
          )}
        </SimpleBar>

        {items.length > 0 && (
          <div className="fixed pb-[22vh] bottom-0 left-0 w-full p-[2vh] bg-[#1A1A1A]/90 backdrop-blur-md z-60 border-t border-white/20">
            <div className="flex justify-between items-center text-[3vh] font-semibold text-white">
              <span>Subtotal:</span>
              <span>R$ {subtotal.toFixed(2)}</span>
            </div>
          </div>
        )}
      </aside>

      {toast && (
        <CartChangeToast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CategoriesNav.jsx ===
"use client";
import React from "react";

export default function CategoriesNav({
  categories,
  selectedCategory,
  onSelectCategory,
}) {
  return (
    <nav className="hidden md:block fixed top-1/3 right-6 bg-[#1A1A1A] bg-opacity-80 p-4 rounded-lg shadow-lg z-50">
      <ul className="space-y-2">
        {categories.map((cat) => (
          <li key={cat}>
            <button
              onClick={() => onSelectCategory(cat)}
              className={`text-sm ${
                cat === selectedCategory
                  ? "text-white font-bold"
                  : "text-[#B3B3B3] hover:text-white"
              }`}
            >
              {cat}
            </button>
          </li>
        ))}
      </ul>
    </nav>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CategoryCarousel/CategoryTitle.jsx ===
"use client";
import React, { useEffect, useRef } from "react";
import { Stardos_Stencil } from "next/font/google";
import { Anton } from "next/font/google";

const anton = Anton({ weight: "400", subsets: ["latin"] });
const stencil = Stardos_Stencil({ subsets: ["latin"], weight: "700" });

export default function CategoryTitle({
  categories,
  selectedCategory,
  onSelectCategory,
}) {
  const containerRef = useRef(null);
  const itemsRef = useRef([]);

  useEffect(() => {
    const c = containerRef.current;
    if (!c) return;
    c.style.scrollBehavior = "smooth";
    c.style.msOverflowStyle = "none";
    c.style.scrollbarWidth = "none";
  }, []);

  useEffect(() => {
    const c = containerRef.current;
    const idx = categories.indexOf(selectedCategory);
    const item = itemsRef.current[idx];
    if (c && item) {
      const cr = c.getBoundingClientRect();
      const ir = item.getBoundingClientRect();
      const offset = ir.left - cr.left - (cr.width / 2 - ir.width / 2);
      c.scrollBy({ left: offset, behavior: "smooth" });
    }
  }, [selectedCategory, categories]);

  const handleWheel = (e) => {
    e.preventDefault();
    containerRef.current?.scrollBy({ left: e.deltaY, behavior: "smooth" });
  };

  const handleKeyDown = (e) => {
    const idx = categories.indexOf(selectedCategory);
    if (e.key === "ArrowRight" && idx < categories.length - 1) {
      onSelectCategory(categories[idx + 1]);
    } else if (e.key === "ArrowLeft" && idx > 0) {
      onSelectCategory(categories[idx - 1]);
    }
  };

  return (
    <div className="flex flex-col items-center bg-[#1a1a1a] border-b  border-[#3A3A3A] pt-12 select-none">
      {/* T√≠tulo com degrad√™ e contorno */}
      <h2
        className={`text-6xl ${anton.className} uppercase pt-3  text-[#eaeaea] tracking-wide text-center`}
        style={{
          textShadow: `
      1px 5px 2px rgba(0,0,0,0.5),
      -2px -2px 2px rgba(255,255,255,0.4),
      0 0 50px  rgba(200,200,200,0.8)
    `,
        }}
      >
        CAT√ÅLOGO
        <br />
      </h2>
      <span className="block mb-12  text-3xl text-[#D4AF37] font-bold ">
        2025
      </span>
      <div
        ref={containerRef}
        tabIndex={0}
        onWheel={handleWheel}
        onKeyDown={handleKeyDown}
        className="flex space-x-3 overflow-x-auto w-full px-4"
        style={{
          scrollbarWidth: "none",
          msOverflowStyle: "none",
        }}
      >
        {categories.map((cat, i) => {
          const isActive = cat === selectedCategory;
          return (
            <div
              key={cat}
              ref={(el) => (itemsRef.current[i] = el)}
              className={`relative flex-shrink-0 cursor-pointer transition-all duration-300 rounded-md min-w-[12rem] sm:min-w-[14rem] md:min-w-[15rem] ${
                isActive
                  ? "scale-100 opacity-90"
                  : "scale-95 opacity-75 hover:scale-100 hover:opacity-85"
              }`}
              onClick={() => onSelectCategory(cat)}
            >
              {/* Camada met√°lica com efeito 3D */}
              <div
                className={`absolute inset-0 rounded-xl ${
                  isActive ? "brightness-110" : ""
                }`}
                style={{
                  backgroundImage: `
                    linear-gradient(145deg, #d0d0d0, #909090),
                    repeating-linear-gradient(
                      45deg,
                      #c0c0c0 0px,
                      #e0e0e0 2px,
                      #c0c0c0 4px
                    )
                  `,
                  backgroundBlendMode: "overlay",
                  backgroundSize: "cover",
                  boxShadow: `
                    inset 2px 2px 5px rgba(255,255,255,0.5),
                    inset -2px -2px 5px rgba(0,0,0,5),
                    2px 2px 8px rgba(0,0,0,0.5)
                  `,
                }}
              />

              {/* Conte√∫do do bot√£o */}
              <div
                className={`relative z-10 px-6 py-3 border-3 text-center rounded-xl border transition-all duration-200 ${
                  isActive
                    ? "border-[#D4AF37] shadow-[0_0_10px_rgba(255,255,255,0.3)]"
                    : "border-[#ffffff]"
                } hover:shadow-[0_0_8px_rgba(255,255,255,0.2)]`}
              >
                <h2
                  className={`${stencil.className} text-base sm:text-lg md:text-xl uppercase font-extrabold text-transparent bg-clip-text`}
                  style={{
                    backgroundImage: `
                      repeating-linear-gradient(
                        135deg,
                        #a0a0a0 0px,
                        #d0d0d0 1px,
                        #a0a0a0 2px
                      ),
                      linear-gradient(135deg, rgba(2, 2, 2, 0.5), rgba(0,0,0,0.1))
                    `,
                    backgroundBlendMode: "overlay",
                    backgroundSize: "100% 2px, 200% 200%",
                  }}
                >
                  {cat}
                </h2>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CheckoutLayout/AddressSection.jsx ===
import React from "react";
import InputField from "./InputField";

export default function AddressSection({
  cep,
  setCep,
  cepValid,
  loadingCep,
  address,
  number,
  setNumber,
  complement,
  setComplement,
}) {
  return (
    <>
      <InputField
        label="CEP"
        type="text"
        name="postal-code"
        autoComplete="postal-code"
        value={cep.replace(/(\d{5})(\d{1,3})?/, (_, p1, p2) =>
          p2 ? `${p1}-${p2}` : p1
        )}
        onChange={(e) => setCep(e.target.value.replace(/\D/g, "").slice(0, 8))}
        isValid={cepValid}
        required
        maxLength={9}
        pattern="[0-9]{5}-[0-9]{3}"
        title="Digite um CEP no formato 00000-000"
        placeholder="00000-000"
      />

      {address.street && (
        <>
          <InputField
            label="Rua"
            value={address.street}
            readOnly
            className="text-[#bbb] font-bold pointer-events-none"
          />
          <InputField
            label="Bairro"
            value={address.neighborhood}
            readOnly
            className="text-[#AAAAAA] font-bold pointer-events-none"
          />
          <div className="grid grid-cols-2 gap-4">
            <InputField
              label="Cidade"
              value={address.city}
              readOnly
              className="text-[#AAAAAA] font-bold pointer-events-none"
            />
            <InputField
              label="UF"
              value={address.state}
              readOnly
              className="text-[#AAAAAA] font-bold pointer-events-none"
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <InputField
              label="N√∫mero"
              type="text"
              value={number}
              onChange={(e) => setNumber(e.target.value)}
              isValid={number.trim().length > 0}
              required
              placeholder="99"
            />
            <InputField
              label="Complemento"
              type="text"
              value={complement}
              onChange={(e) => setComplement(e.target.value)}
              showAsterisk={false}
              placeholder="Pavilh√£o Esquina"
            />
          </div>
        </>
      )}
    </>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CheckoutLayout/CheckoutLayout.jsx ===
// src/components/CheckoutLayout.jsx

"use client";
import React from "react";
import Link from "next/link";
import { ArrowLeft } from "lucide-react";
import ProductSummary from "./ProductSummary";
import CustomerInfoForm from "./CustomerInfoForm";

export default function CheckoutLayout({
  items,
  total,
  customer,
  email,
  phone,
  loading,
  onCustomerChange,
  onEmailChange,
  onPhoneChange,
  onSubmit,
}) {
  return (
    <div className="min-h-screen bg-[#202020] text-white font-roboto antialiased">
      {/* Header fixo */}
      <header className="fixed top-0 left-0 right-0 px-4 py-3 grid grid-cols-12 items-center bg-[rgba(26,26,26,0.7)] backdrop-blur-lg z-30 border-b border-white/20">
        <div className="col-span-2 flex items-center">
          <Link
            href="/"
            aria-label="Voltar ao cat√°logo"
            className="flex items-center"
          >
            <ArrowLeft className="h-6 w-6 text-white mr-1" />
            <span className="text-white text-base font-bold">Cat√°logo</span>
          </Link>
        </div>
        <div className="col-span-8 text-center">
          <img
            src="/logo.png"
            alt="Logo do site"
            className="h-14 w-auto inline-block"
          />
        </div>
      </header>

      {/* Conte√∫do principal */}
      <main className="pt-30 pb-10 px-4 max-w-6xl mx-auto space-y-12 backdrop-blur-sm bg-[#252525] bg-opacity-90 min-h-[100vh] md:w-120">
        <ProductSummary items={items} total={total} />

        <CustomerInfoForm
          customer={customer}
          email={email}
          phone={phone}
          loading={loading}
          disableSubmit={items.length === 0}
          onCustomerChange={onCustomerChange}
          onEmailChange={onEmailChange}
          onPhoneChange={onPhoneChange}
          onSubmit={onSubmit}
        />
      </main>
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CheckoutLayout/CustomerInfoForm.jsx ===
import React, { useState, useRef, useEffect } from "react";
import { useCart } from "@/context/CartContext";
import Script from "next/script";

import InputField from "./InputField";
import AddressSection from "./AddressSection";
import {
  initPhoneInput,
  validatePhoneBR,
} from "@/components/CheckoutLayout/utils/phoneUtils";
import { validateEmail } from "@/components/CheckoutLayout/utils/emailUtils";
import { fetchAddressByCEP } from "@/components/CheckoutLayout/utils/cepUtils";

export default function CustomerInfoForm({
  customer,
  email,
  phone,
  loading,
  onCustomerChange,
  onEmailChange,
  onPhoneChange,
  onSubmit,
}) {
  const { items } = useCart();
  const phoneRef = useRef(null);

  const [cep, setCep] = useState("");
  const [address, setAddress] = useState({
    street: "",
    neighborhood: "",
    city: "",
    state: "",
  });
  const [loadingCep, setLoadingCep] = useState(false);
  const [number, setNumber] = useState("");
  const [complement, setComplement] = useState("");
  const [phoneValid, setPhoneValid] = useState(null);
  const [cepValid, setCepValid] = useState(null);

  useEffect(() => {
    const value = phoneRef.current?.value || "";
    setPhoneValid(validatePhoneBR(value).valid);
  }, [phone]);

  useEffect(() => {
    if (!phoneRef.current) return;
    const cleanup = initPhoneInput(phoneRef, onPhoneChange);
    return cleanup;
  }, [onPhoneChange]);

  useEffect(() => {
    const sanitized = cep.replace(/\D/g, "");
    if (sanitized.length < 8) {
      setCepValid(false);
      return;
    }
    setLoadingCep(true);
    fetchAddressByCEP(sanitized)
      .then((res) => {
        setAddress(res);
        setCepValid(true);
      })
      .catch((err) => {
        alert(err.message);
        setAddress({ street: "", neighborhood: "", city: "", state: "" });
        setCepValid(false);
      })
      .finally(() => setLoadingCep(false));
  }, [cep]);

  const handleFormSubmit = (e) => {
    e.preventDefault();
    const trimmedName = customer.trim();
    if (trimmedName.length < 2) {
      alert("Nome deve ter pelo menos 2 letras.");
      return;
    }
    if (number.trim() === "") {
      alert("N√∫mero do endere√ßo n√£o pode ficar em branco.");
      return;
    }
    const emailCheck = validateEmail(email);
    if (!emailCheck.valid) {
      alert(emailCheck.reason);
      return;
    }
    const phoneVal = validatePhoneBR(phoneRef.current.value);
    if (!phoneVal.valid) {
      alert(phoneVal.reason);
      return;
    }
    const sanitizedCep = cep.replace(/\D/g, "");
    if (sanitizedCep.length !== 8) {
      alert("CEP deve conter 8 d√≠gitos.");
      return;
    }
    if (!address.street) {
      alert("Endere√ßo inv√°lido ou CEP n√£o encontrado.");
      return;
    }

    onPhoneChange(phoneVal.e164);

    onSubmit({
      customer,
      email,
      phone: phoneVal.e164,
      address: {
        street: address.street,
        neighborhood: address.neighborhood,
        city: address.city,
        state: address.state,
        number, // <‚Äì‚Äì aqui
        complement, // <‚Äì‚Äì e aqui
      },
      cartItems: items,
    });
  };

  return (
    <section className="bg-[#1E1E1E] bg-opacity-90 p-6 rounded-2xl border border-[#2A2A2A] shadow-inner">
      <Script
        src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
        strategy="afterInteractive"
      />
      <h2 className="uppercase tracking-wide text-2xl mb-4 text-[#DDDDDD]">
        Informa√ß√µes
      </h2>
      <form noValidate onSubmit={handleFormSubmit} className="space-y-6">
        <InputField
          label="Nome/Empresa"
          type="text"
          name="name"
          autoComplete="name"
          value={customer}
          onChange={(e) => onCustomerChange(e.target.value)}
          isValid={customer.trim().length >= 2}
          required
          minLength={2}
          placeholder="Jo√£o da Silva / Empresa XYZ"
        />
        <InputField
          label="E-mail"
          type="email"
          name="email"
          autoComplete="email"
          value={email}
          onChange={(e) => onEmailChange(e.target.value)}
          isValid={validateEmail(email).valid}
          required
          placeholder="joao@gmail.com"
        />

        <AddressSection
          cep={cep}
          setCep={setCep}
          cepValid={cepValid}
          loadingCep={loadingCep}
          address={address}
          number={number}
          setNumber={setNumber}
          complement={complement}
          setComplement={setComplement}
        />

        <InputField
          label="Celular"
          ref={phoneRef}
          type="tel"
          autoComplete="tel"
          defaultValue={phone}
          onChange={() => {}}
          isValid={phoneValid}
          required
          placeholder="(00) 00000-0000"
        />
        <button
          type="submit"
          disabled={loading}
          className="w-full py-3 text-lg font-semibold rounded-xl bg-gradient-to-r from-[#CFAF37] to-[#A8760B] hover:from-[#D4AF37] hover:to-[#B8860B] disabled:opacity-50 cursor-pointer disabled:cursor-not-allowed"
        >
          {loading
            ? "Enviando‚Ä¶"
            : loadingCep
              ? "Buscando CEP‚Ä¶"
              : "Finalizar Pedido"}
        </button>
      </form>
    </section>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CheckoutLayout/InputField.jsx ===
import React, { useState, forwardRef } from "react";

const InputField = forwardRef(
  (
    {
      label,
      value,
      onChange,
      showAsterisk = true,
      isValid = null, // true | false | null (sem valida√ß√£o)
      className = "",
      ...props
    },
    ref
  ) => {
    const [touched, setTouched] = useState(false);
    const [focused, setFocused] = useState(false);

    const handleFocus = () => setFocused(true);
    const handleBlur = () => {
      setFocused(false);
      setTouched(true);
    };

    const baseClasses =
      "w-full p-3 rounded-xl focus:ring-2 focus:ring-[#D4AF37] placeholder-gray-400/13";
    const defaultState = "bg-[#1A1A1A] text-white border border-[#2A2A2A]";
    const validState =
      "bg-green-300/5 text-[#bbb] font-bold border border-green-500/20";
    const invalidState = "bg-red-300/5 border border-red-500/40";

    let stateClasses = defaultState;
    if (touched && !focused && isValid !== null) {
      stateClasses = isValid ? validState : invalidState;
    }

    return (
      <div>
        <label
          className={`block mb-2 text-sm text-[#DADADA] font-bold ${
            showAsterisk
              ? "after:content-['*'] after:ml-1 after:text-red-500/30"
              : "after:content-['(opcional)'] after:ml-1 after:text-[0.75rem] after:text-[#DADADA]/35"
          }`}
        >
          {label}
        </label>
        <input
          ref={ref}
          value={value}
          onChange={onChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={`${baseClasses} ${stateClasses} ${className}`}
          {...props}
        />
      </div>
    );
  }
);

export default InputField;

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CheckoutLayout/ProductSummary.jsx ===
// src/components/ProductSummary.jsx
// Exibe lista de itens, totais e bot√µes de remo√ß√£o

import React from "react";
import { X } from "lucide-react";
import { useCart } from "@/context/CartContext";

export default function ProductSummary({ items, total }) {
  const { removeItem } = useCart();

  return (
    <section>
      <h1 className="uppercase tracking-wide text-3xl mb-6 text-[#DDDDDD] text-center">
        Resumo do Pedido
      </h1>

      {items.length === 0 ? (
        <p className="text-base text-[#AAAAAA]">Seu carrinho est√° vazio.</p>
      ) : (
        <ul>
          {items.map((i, idx) => (
            <li
              key={i.sku}
              className={`flex items-center justify-between p-4 rounded-lg ${
                idx % 2 === 0 ? "bg-[#1E1E1E]" : "bg-[#2A2A2A]"
              }`}
            >
              <img
                src={i.image}
                alt={i.title}
                className="h-12 w-auto object-contain rounded-md"
              />
              <div className="flex-1 ml-4">
                <div className="font-semibold text-base text-white">
                  {i.title}
                </div>
                <div className="text-sm text-[#B3B3B3]">{i.material}</div>
              </div>
              <div className="w-12 text-center text-white font-medium">
                {i.quantity}
              </div>
              <div className="w-24 text-right text-white font-medium">
                R$ {(i.price * i.quantity).toFixed(2)}
              </div>
              <button
                onClick={() => removeItem(i.sku)}
                aria-label="Remover item"
                className="ml-4 text-red-400 hover:text-red-600 p-1"
              >
                <X className="h-5 w-5" />
              </button>
            </li>
          ))}

          <li className="flex justify-between items-center mt-4 pt-4 border-t border-[rgba(255,255,255,0.3)]">
            <span className="font-semibold text-lg text-white">Total</span>
            <span className="font-semibold text-lg text-white">
              R$ {total.toFixed(2)}
            </span>
          </li>
        </ul>
      )}
    </section>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CheckoutLayout/utils/cepUtils.js ===
// src/utils/cepUtils.js

/**
 * Busca endere√ßo a partir do CEP usando a API ViaCEP.
 * @param {string} cep - CEP com 8 d√≠gitos (ex: "01001000")
 * @returns {Promise<{street: string, neighborhood: string, city: string, state: string}>}
 */
export async function fetchAddressByCEP(cep) {
  const sanitized = cep.replace(/\D/g, "");
  if (sanitized.length !== 8) {
    throw new Error("CEP deve ter 8 d√≠gitos.");
  }
  const res = await fetch(`https://viacep.com.br/ws/${sanitized}/json/`);
  if (!res.ok) {
    throw new Error("Erro ao buscar CEP.");
  }
  const data = await res.json();
  if (data.erro) {
    throw new Error("CEP n√£o encontrado.");
  }
  return {
    street: data.logradouro,
    neighborhood: data.bairro,
    city: data.localidade,
    state: data.uf,
  };
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CheckoutLayout/utils/emailUtils.js ===
// src/utils/emailUtils.js
// Sintaxe + blacklist de dom√≠nios descart√°veis e suspeitos

import validator from "validator";
import disposableDomains from "disposable-email-domains";

const extraBlacklist = [
  "scammer.com",
  "spamdomain.io",
  "fraud.net",
  // adicione aqui outros dom√≠nios de golpistas
];

const blacklist = new Set([...disposableDomains, ...extraBlacklist]);

/**
 * Valida sintaxe e bloqueia dom√≠nios indesejados.
 * @param {string} email
 * @returns {{ valid: boolean, reason?: string }}
 */
export function validateEmail(email) {
  if (!validator.isEmail(email)) {
    return { valid: false, reason: "Formato de e-mail inv√°lido" };
  }
  const domain = email.split("@")[1].toLowerCase();
  if (blacklist.has(domain)) {
    return { valid: false, reason: "Dom√≠nio de e-mail n√£o permitido" };
  }
  return { valid: true };
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/CheckoutLayout/utils/phoneUtils.js ===
import { parsePhoneNumberFromString } from "libphonenumber-js";

/**
 * Formata n√∫mero nacional brasileiro progressivamente.
 * Ex: 11912345678 ‚Üí (11) 91234-5678
 */
export function formatPhoneBR(raw) {
  if (raw.length === 0) return "";
  if (raw.length <= 2) return `(${raw}`;
  if (raw.length <= 6) return `(${raw.slice(0, 2)}) ${raw.slice(2)}`;
  if (raw.length <= 10)
    return `(${raw.slice(0, 2)}) ${raw.slice(2, 6)}-${raw.slice(6)}`;
  return `(${raw.slice(0, 2)}) ${raw.slice(2, 7)}-${raw.slice(7)}`;
}

/**
 * Inicializa o campo de telefone: formata√ß√£o, valida√ß√£o e emiss√£o.
 * @param {{ current: HTMLInputElement }} inputRef
 * @param {(e164: string) => void} onPhoneChange
 * @param {(valid: boolean) => void} [setPhoneValid]
 * @returns {() => void} cleanup
 */
export function initPhoneInput(inputRef, onPhoneChange, setPhoneValid) {
  const inputEl = inputRef.current;

  const handleInput = () => {
    if (!inputEl) return;

    // Entrada bruta (pode vir com +55, espa√ßos, tra√ßos, etc.)
    let inputValue = inputEl.value;
    let digits = inputValue.replace(/\D/g, "");

    // Remove DDI +55 se exceder 11 d√≠gitos
    if (digits.startsWith("55") && digits.length > 11) {
      digits = digits.slice(2);
    }

    // Garante no m√°ximo 11 d√≠gitos
    const limited = digits.slice(0, 11);

    // Atualiza campo com m√°scara nacional
    const formatted = formatPhoneBR(limited);
    inputEl.value = formatted;

    // Valida√ß√£o + convers√£o para E.164
    const parsed = parsePhoneNumberFromString(`+55${limited}`, "BR");
    const isValid = parsed?.isValid() || false;
    const e164 = parsed?.number || "";

    onPhoneChange(e164);
    if (setPhoneValid) setPhoneValid(isValid);
  };

  inputEl.addEventListener("input", handleInput);
  inputEl.addEventListener("change", handleInput); // cobre autocomplete

  return () => {
    inputEl.removeEventListener("input", handleInput);
    inputEl.removeEventListener("change", handleInput);
  };
}

/**
 * Valida e retorna n√∫mero E.164 de um telefone brasileiro.
 * @param {string} value - n√∫mero no formato E.164
 * @returns {{ valid: boolean, reason?: string, e164?: string }}
 */
export function validatePhoneBR(value) {
  const phoneNumber = parsePhoneNumberFromString(value, "BR");
  if (!phoneNumber) {
    return { valid: false, reason: "Formato de telefone inv√°lido" };
  }

  const national = phoneNumber.nationalNumber || "";
  if (national.length < 10) {
    return { valid: false, reason: "Telefone incompleto" };
  }

  if (!phoneNumber.isValid()) {
    return { valid: false, reason: "Telefone inv√°lido para o Brasil" };
  }

  return { valid: true, e164: phoneNumber.number };
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/FloatingCheckoutButton.jsx ===
// src/components/FloatingCheckoutButton.jsx
"use client";

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useCart } from "@/context/CartContext";
import { useNotifications } from "@/hooks/useNotifications";
import NotificationDialog from "./NotificationDialog";

export default function FloatingCheckoutButton() {
  const router = useRouter();
  const { items } = useCart();
  const {
    list: notifications,
    add: addNotification,
    clear: clearNotifications,
  } = useNotifications(7);

  // Visibilidade do bot√£o
  const [visible, setVisible] = useState(false);
  useEffect(() => {
    setVisible(items.length > 0);
  }, [items.length]);

  // Agrupa quantidade por material (usado na valida√ß√£o)
  const totalsByMaterial = items.reduce((acc, item) => {
    acc[item.material] = (acc[item.material] || 0) + item.quantity;
    return acc;
  }, {});

  const handleCheckout = () => {
    clearNotifications();

    const shortages = Object.entries(totalsByMaterial)
      .filter(([_, qty]) => qty < 5)
      .map(([material, qty]) => ({ material, missing: 5 - qty }));

    if (shortages.length === 0) {
      router.push("/checkout");
    } else {
      shortages.forEach(({ material, missing }) =>
        addNotification(
          <>
            <div className="text-[0.9rem]">
              <span className="text-[#dadada]">
                Falta{missing > 1 ? "m" : ""}
              </span>{" "}
              <span className="font-bold">{missing}</span>{" "}
              <span className="text-[#dadada]">
                unidade
                {missing > 1 ? "s" : ""} de
              </span>{" "}
              <span className="font-bold">{material}</span>
            </div>
          </>
        )
      );
    }
  };

  useEffect(() => {
    if (notifications.length > 0) {
      clearNotifications();

      const shortages = Object.entries(totalsByMaterial)
        .filter(([_, qty]) => qty < 5)
        .map(([material, qty]) => ({ material, missing: 5 - qty }));

      shortages.forEach(({ material, missing }) =>
        addNotification(
          <>
            <div className="text-[0.9rem]">
              <span className="text-[#dadada]">
                Falta{missing > 1 ? "m" : ""}
              </span>{" "}
              <span className="font-bold">{missing}</span>{" "}
              <span className="text-[#dadada]">
                unidade
                {missing > 1 ? "s" : ""} de
              </span>{" "}
              <span className="font-bold">{material}</span>
            </div>
          </>
        )
      );
    }
  }, [items, clearNotifications, addNotification, notifications.length]);

  return (
    <>
      <div
        className={`
          fixed bottom-0 left-0 right-0
          grid grid-cols-12 items-center
          bg-[#1A1A1A]/70 backdrop-blur-lg
          h-[9vh]
          border-t border-white/10
          px-[3vh] py-[0] z-50
          transform transition-transform duration-500 ease-out
          ${visible ? "translate-y-0" : "translate-y-full"}
        `}
      >
        <div className="col-span-12 flex justify-center select-none">
          <button
            onClick={handleCheckout}
            className="
              bg-gradient-to-r from-[#0a0a0a] to-[#2a2a2a]
              hover:from-[#0a0a0a] hover:to-[#4a4a4a]
              text-[#D4AF37] text-[3vh] font-semibold
              py-[1vh] px-[4vh] rounded-[1.5vh] w-[40vh]
              cursor-pointer
              shadow-[0_0_0.4vh_#A8760B] hover:shadow-[0_0_2vh_#A8760B]
              transform transition-all duration-200
              hover:-translate-y-[0.05vh] active:translate-y-[0.05vh] active:scale-95
            "
            aria-label="Finalizar Pedido"
          >
            üî™ Finalizar Pedido!
          </button>
        </div>
      </div>

      <NotificationDialog
        notifications={notifications}
        clear={clearNotifications}
      />
    </>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/FullHoverZoom.jsx ===
"use client";
import React, { useState, useRef } from "react";
import Image from "next/image";

export default function FullHoverZoom({ src, alt, zoom = 2 }) {
  const [zoomed, setZoomed] = useState(false);
  const [origin, setOrigin] = useState({ x: 50, y: 50 });
  const containerRef = useRef(null);

  const handleMouseMove = (e) => {
    const rect = containerRef.current.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    setOrigin({ x, y });
  };

  return (
    <div
      ref={containerRef}
      className="relative w-full aspect-[1000/400] overflow-hidden cursor-zoom-in rounded-lg"
      onMouseEnter={() => setZoomed(true)}
      onMouseMove={(e) => zoomed && handleMouseMove(e)}
      onMouseLeave={() => setZoomed(false)}
    >
      <Image
        src={src}
        alt={alt}
        fill
        className="object-cover rounded-lg"
        style={{
          transform: zoomed ? `scale(${zoom})` : "scale(1)",
          transformOrigin: `${origin.x}% ${origin.y}%`,
          transition: "transform 1s ease",
        }}
      />
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/NavBar.jsx ===
// src/components/NavBar.jsx
"use client";
import React from "react";
import { Sidebar, ShoppingCart } from "lucide-react";
import { useCart } from "@/context/CartContext";

export default function NavBar({ onToggleDrawer, onToggleCart }) {
  const { items } = useCart();
  // soma todas as quantidades
  const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);

  return (
    <header className="fixed grid min-h-[5vw] grid-cols-3 items-center justify-items-center top-0 left-0 right-0 bg-[#1A1A1A]/70 backdrop-blur-lg border-b border-white/10 px-[2vw] z-50 select-none">
      {/* √çndice */}
      <div className="col-span-1 h-[100%]  justify-self-start">
        <button
          onClick={onToggleDrawer}
          aria-label="Abrir menu"
          className="flex items-center cursor-pointer  h-[100%]"
        >
          <Sidebar className="h-[auto] w-[clamp(5vh,3rem,5vh)]" />
          <span className="ml-[max(0.2rem,1vw)] text-sm font-bold md:text-[clamp(3vh,2rem,3vh)] ">
            √çndice
          </span>
        </button>
      </div>

      {/* Logo */}
      <div className="col-span-1 text-center justify-self-center ">
        <img
          src="/logo.png"
          alt="Logo do site"
          className="w-auto inline-block md:h-[clamp(9vh,5rem,9vh)]"
        />
      </div>

      {/* Carrinho */}
      <div className="col-span-1 flex justify-self-end h-[100%] max-h-[3rem]">
        <button
          onClick={onToggleCart}
          aria-label="Ver carrinho"
          className="relative flex items-center cursor-pointer h-[100%] pl-[4rem] py-6"
        >
          <span className="hidden md:inline mr-[1vw] text-[clamp(3vh,2rem,3vh)] font-bold">
            Carrinho
          </span>
          <div className="relative">
            <ShoppingCart className="h-[auto] w-[clamp(5vh,3rem,5vh)] text-white" />
            {totalQuantity > 0 && (
              <span
                className="
                  absolute -top-[1vh] -right-[1vh]
                  bg-[#D4AF37] text-[#1a1a1a] text-[clamp(2vh,1.5rem,2vh)] font-bold
                  rounded-full h-[auto] w-[clamp(3vh,2rem,3vh)] flex items-center justify-center
                "
              >
                {totalQuantity}
              </span>
            )}
          </div>
        </button>
      </div>
    </header>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/NotificationDialog.jsx ===
// src/components/NotificationDialog.jsx
"use client";

import React from "react";
import { createPortal } from "react-dom";
import { X } from "lucide-react";

export default function NotificationDialog({ notifications, clear }) {
  if (!notifications.length) return null;

  return createPortal(
    <div className="fixed bottom-20 w-80 left-1/2 transform -translate-x-1/2 z-50">
      <div className="max-w-md bg-[#1A1A1A]/70 backdrop-blur-lg text-white rounded-lg border border-white/20 shadow-lg overflow-hidden">
        {/* Cabe√ßalho fixo */}
        <div className="flex items-center justify-between px-4 py-2 border-b border-white/20">
          <span className="text-[1rem] font-semibold">
            ‚ö†Ô∏è &nbsp;Pedido M√≠nimo
          </span>
          <button onClick={clear} aria-label="Fechar" className="p-1">
            <X className="cursor-pointer h-6 w-6" />
          </button>
        </div>

        {/* Lista completa sempre vis√≠vel */}
        <div className="px-4 py-2 space-y-1 text-xs">
          {notifications.map((n, index) => (
            <div key={`${n.id}-${index}`} className="flex items-start">
              <span className="mr-2">‚Ä¢</span>
              <span className="flex-1">{n.text}</span>
            </div>
          ))}
          <div className="mt-2 text-yellow-300">
            * Apenas o material conta. Modelo n√£o interfere.
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/ProductCard/AddToCartButton.jsx ===
// src/components/AddToCartButton.jsx
"use client";

import React, { useState } from "react";
import { ShoppingCart } from "lucide-react";
import CartChangeToast from "../CartChangeToast";

export default function AddToCartButton({ onClick, disabled }) {
  const [toast, setToast] = useState(null);

  const handleClick = () => {
    if (disabled) {
      setToast({ message: "Selecione algum produto!", type: "alert" });
      return;
    }
    if (onClick) onClick();
    setToast({ message: "Produto adicionado ao carrinho!", type: "success" });
  };

  return (
    <>
      <button
        type="button"
        onClick={handleClick}
        className={`
          mt-auto py-2 sm:py-3 px-3 sm:px-6
          bg-gradient-to-r from-[#D4AF37] to-[#A8760B]
          hover:from-[#CFAF37] hover:to-[#B8860B]
          text-[#1a1a1a] font-semibold rounded-xl shadow-md
          transition flex items-center justify-center space-x-2
          text-base sm:text-lg font-bold
          ${disabled ? "cursor-default" : "cursor-pointer"}
        `}
      >
        <ShoppingCart className="h-6 w-6" />
        <span>Adicionar ao carrinho</span>
      </button>

      {toast && (
        <CartChangeToast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/ProductCard/ImageZoom.jsx ===
"use client";
import React from "react";
import { PhotoProvider, PhotoView } from "react-photo-view";
import "react-photo-view/dist/react-photo-view.css";
import FullHoverZoom from "../FullHoverZoom";
import ZoomToolbar from "./ZoomToolbar";

export default function ImageZoom({ src, alt, zoom }) {
  return (
    <PhotoProvider
      maskOpacity={0.3}
      maskClassName="bg-black bg-opacity-30 backdrop-blur-sm"
      toolbarRender={ZoomToolbar}
    >
      <PhotoView src={src} key={src}>
        <div className="cursor-zoom-in">
          <FullHoverZoom src={src} alt={alt} zoom={zoom} />
        </div>
      </PhotoView>
    </PhotoProvider>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/ProductCard/ProductCard.jsx ===
// src/components/ProductCard/ProductCard.jsx
"use client";

import React, { useState } from "react";
import ImageZoom from "./ImageZoom";
import VariantsTable from "./VariantsTable";
import AddToCartButton from "./AddToCartButton";
import { useCart } from "@/context/CartContext";

export default function ProductCard({ product, observeRef }) {
  const [selectedVariants, setSelectedVariants] = useState([]);
  const [quantities, setQuantities] = useState(() =>
    product.variants.reduce((acc, v) => ({ ...acc, [v.sku]: 0 }), {})
  );
  const { addItem } = useCart();

  const toggleVariant = (sku) =>
    setSelectedVariants((prev) =>
      prev.includes(sku) ? prev.filter((s) => s !== sku) : [...prev, sku]
    );

  const changeQuantity = (sku, val) =>
    setQuantities((prev) => ({ ...prev, [sku]: val }));

  const handleAddToCart = () => {
    selectedVariants.forEach((sku) => {
      const qty = quantities[sku];
      if (qty <= 0) return;
      const variant = product.variants.find((v) => v.sku === sku);
      addItem({
        id: product.id,
        sku,
        title: product.title,
        price: variant.price,
        quantity: qty,
        image: product.imageUrl,
        material: variant.material,
      });
    });

    setSelectedVariants([]);
  };
  const isDisabled =
    selectedVariants.filter((sku) => quantities[sku] > 0).length === 0;

  return (
    <div
      ref={observeRef}
      className="
        select-none bg-[#1a1a1a] border border-[#2a2a2a] rounded-2xl shadow-lg
        w-full max-w-full sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl
        mx-auto p-3 sm:p-6 flex flex-col gap-2 sm:gap-3
      "
    >
      {product.imageUrl && (
        <ImageZoom src={product.imageUrl} alt={product.title} zoom={2} />
      )}

      <h2 className="text-base sm:text-xl font-semibold text-white text-center whitespace-nowrap">
        {product.title}
      </h2>

      <VariantsTable
        variants={product.variants}
        selectedVariants={selectedVariants}
        toggleVariant={toggleVariant}
        quantities={quantities}
        changeQuantity={changeQuantity}
      />

      <AddToCartButton onClick={handleAddToCart} disabled={isDisabled} />
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/ProductCard/VariantRow.jsx ===
// src/components/ProductCard/VariantRow.jsx
import React from "react";

export default function VariantRow({
  variant,
  checked,
  toggle,
  quantity,
  onQuantityChange,
}) {
  const handleToggle = () => {
    if (!checked && quantity === 0) {
      onQuantityChange(1);
    }
    toggle();
  };

  const handleQtyChange = (raw) => {
    // s√≥ d√≠gitos, at√© 3 chars
    const digits = String(raw).replace(/\D/g, "").slice(0, 3);
    // remove zeros √† esquerda, mas deixa "0" se tudo for zero
    const clean = digits.replace(/^0+/, "") || "0";
    const num = Math.min(999, parseInt(clean, 10));
    onQuantityChange(num);
    // apenas ativa o checkbox se quantidade > 0
    if (num > 0 && !checked) toggle();
    if (num === 0 && checked) toggle(); // Se quantidade = 0 e checkbox marcado, desmarca
  };

  const decrement = () => handleQtyChange(quantity - 1);
  const increment = () => handleQtyChange(quantity + 1);
  const handleInput = (e) => handleQtyChange(e.target.value);

  // ajusta font-size conforme d√≠gitos
  const len = String(quantity).length;
  const fontSize = len === 1 ? "1rem" : len === 2 ? "0.9rem" : "0.8rem";

  return (
    <tr className="odd:bg-transparent even:bg-[#1f1f1f]">
      {/* Checkbox */}
      <td className="w-[10%] pt-2 pb-0 border-t border-[#00000040] text-center cursor-pointer">
        <input
          type="checkbox"
          checked={checked}
          onChange={handleToggle}
          className="h-6 w-6 accent-[#D4AF37] bg-[#1A1A1A] border border-[#00000040] rounded"
        />
      </td>

      {/* Material */}
      <td
        className="w-[45%] px-2 py-0 border-t border-[#00000040] text-left text-[#DADADA] font-bold cursor-pointer"
        onClick={handleToggle}
      >
        {variant.material}
      </td>

      {/* Pre√ßo */}
      <td className="w-[20%] px-2 py-0 border-t border-[#00000040] text-left text-[#EAEAEA]">
        R$ {variant.price.toFixed(2)}
      </td>

      {/* Quantidade */}
      <td className="w-[25%] px-2 py-0 border-t border-[#00000040] text-center">
        <div className="inline-flex items-center border border-[#00000040] bg-[#1A1A1A] rounded">
          <button
            type="button"
            onClick={decrement}
            disabled={quantity <= 0}
            className="
              h-6 w-6 flex items-center justify-center
              text-white font-bold rounded-none
              border-r border-[#2A2A2A] cursor-pointer
              disabled:opacity-10 disabled:hover:bg-[#1A1A1A] disabled:pointer-events-none
              hover:bg-[#3a3a3a] hover:rounded
            "
          >
            ‚Äì
          </button>

          <input
            type="text"
            inputMode="numeric"
            pattern="\d*"
            value={quantity}
            onChange={handleInput}
            maxLength={3}
            style={{ fontSize }}
            className={
              `w-8 h-6 bg-transparent text-center p-0 focus:outline-none focus:ring-2 focus:ring-yellow-400 ` +
              (quantity > 0 ? "text-[#DADADA]" : "text-[gray]/30")
            }
          />

          <button
            type="button"
            onClick={increment}
            disabled={quantity >= 999}
            className="
              h-6 w-6 flex items-center justify-center cursor-pointer
              text-white font-bold rounded-none
              border-l border-[#2A2A2A]
              disabled:opacity-50 disabled:cursor-not-allowed
              hover:bg-[#272727] hover:rounded
            "
          >
            +
          </button>
        </div>
      </td>
    </tr>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/ProductCard/VariantsTable.jsx ===
import React from "react";
import VariantRow from "./VariantRow";

export default function VariantsTable({
  variants,
  selectedVariants,
  toggleVariant,
  quantities,
  changeQuantity,
}) {
  return (
    <div className="overflow-hidden rounded-lg border border-[#00000040]">
      <table
        className="
          w-full
          text-[#B3B3B3]
          table-auto
          border-separate border-spacing-0
        "
      >
        <thead className="bg-[#2A2A2A]">
          <tr>
            <th className="w-[5%] px-2 py-0 text-center text-md font-bold" />
            <th className="w-[40%] px-2 py-0 text-left text-md font-bold">
              Material
            </th>
            <th className="w-[25%] px-2 py-0 text-left text-md font-bold">
              Pre√ßo
            </th>
            <th className="w-[20%] px-2 py-0 text-center text-md font-bold">
              Qtde.
            </th>
          </tr>
        </thead>
        <tbody>
          {variants.map((v, i) => (
            <VariantRow
              key={v.sku}
              variant={v}
              checked={selectedVariants.includes(v.sku)}
              toggle={() => toggleVariant(v.sku)}
              quantity={quantities[v.sku]}
              onQuantityChange={(val) => changeQuantity(v.sku, val)}
              // adiciona classes especiais no √∫ltimo row para garantir os cantos
              className={`
                ${i % 2 === 0 ? "bg-[#1E1E1E]" : ""}
                ${i === variants.length - 1 ? "last:rounded-bl-lg last:rounded-br-lg" : ""}
              `}
            />
          ))}
        </tbody>
      </table>
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/ProductCard/ZoomToolbar.jsx ===
import React from "react";

export default function ZoomToolbar({ scale, onScale, onClose }) {
  return (
    <div
      className="
      fixed bottom-8
      left-1/2 transform -translate-x-1/2
      flex space-x-2 md:space-x-4 z-50
    "
    >
      <button
        onClick={() => onScale(scale - 0.2)}
        className="
          w-12 h-12
          bg-[#000000] hover:bg-[#303030]
          text-white text-base text-lg
          rounded-full shadow-md
        "
      >
        ‚àí
      </button>
      <button
        onClick={() => onScale(scale + 0.2)}
        className="
          w-12 h-12
          bg-[#000000] hover:bg-[#303030]
          text-white text-base text-lg
          rounded-full shadow-md
        "
      >
        +
      </button>
      <button
        onClick={onClose}
        className="
          w-12 h-12
          bg-red-400 hover:bg-red-500
          text-white text-base text-lg
          rounded-full shadow-md
        "
      >
        √ó
      </button>
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/ProductsSection.jsx ===
"use client";
import React from "react";
import useProducts from "@/hooks/useProducts";
import ProductCard from "./ProductCard/ProductCard";
import { ArrowBigUpDash } from "lucide-react";

export default function ProductsSection({ selectedCategory }) {
  const { products, lastRef, isValidating, isReachingEnd, error } =
    useProducts(selectedCategory);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  return (
    <section className="bg-[#252525] bg-opacity-90 backdrop-blur-sm rounded-xl p-2 sm:p-6 shadow-lg">
      <div className="grid grid-cols-1 [@media_(min-width:857px)]:grid-cols-2 gap-6">
        {products.map((product, idx) => (
          <ProductCard
            key={product.id}
            product={product}
            observeRef={idx === products.length - 1 ? lastRef : null}
          />
        ))}
      </div>

      {isValidating && (
        <p className="text-center text-gray-500 mt-20 h-[50vh] text-6xl select-none">
          ‚ü≥
        </p>
      )}

      {isReachingEnd && !isValidating && (
        <button
          onClick={scrollToTop}
          aria-label="Voltar ao topo"
          className="flex items-center cursor-pointer h-[100%] justify-center mt-8 mx-auto border rounded-lg p-2 text-gray-500 select-none"
        >
          <span className="text-base font-bold text-lg mr-1">
            Voltar ao topo
          </span>
          <ArrowBigUpDash className="h-6 w-6" />
        </button>
      )}

      {error && (
        <p className="text-red-400 text-center mt-20 h-[50vh] text-2xl select-none cursor-pointer">
          Oops, algo deu errado.
        </p>
      )}
    </section>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/components/SideDrawer.jsx ===
// SideDrawer.jsx
"use client";
import React from "react";
import SimpleBar from "simplebar-react";
import "simplebar-react/dist/simplebar.min.css";

export default function SideDrawer({
  isOpen,
  onClose,
  categories,
  selectedCategory,
  setSelectedCategory,
}) {
  return (
    <div
      className={`z-40 fixed inset-0 ${isOpen ? "" : "pointer-events-none"}`}
      onClick={onClose}
    >
      <aside
        onClick={(e) => e.stopPropagation()}
        className={`
          fixed top-[8vh] left-0
          h-[100%] w-30 min-w-[25vh] max-w-[10rem] 
          bg-[#1A1A1A]/70 backdrop-blur-lg
          border-r border-white/10
          origin-left transform transition-transform duration-350 md:top-[10vh] min-w-[30vh]
          ${isOpen ? "scale-x-100" : "scale-x-0"}
        `}
      >
        <button
          onClick={onClose}
          aria-label="Fechar menu"
          className="cursor-pointer absolute top-[1vh] right-[1vh] text-white text-[4vh] focus:outline-none"
        >
          √ó
        </button>

        <SimpleBar
          style={{ maxHeight: "100%" }}
          className="mt-[6vh] pl-[1vh] pr-[3vh] pb-[20vh] scroll-smooth font-roboto"
        >
          <nav className="space-y-[0.5vh] ">
            {categories.map((cat) => (
              <button
                key={cat}
                onClick={() => {
                  setSelectedCategory(cat);
                  onClose();
                }}
                className={`
                  w-full h-[6vh] text-left py-[1vh] pl-[1vh] text-[2.5vh]
                  cursor-pointer
                  border-b-[0.1vh] border-[#60606050] last:border-none
                  transition-transform duration-200
                  ${
                    cat === selectedCategory
                      ? "bg-[#D4AF37]  font-bold text-[#1a1a1a]"
                      : "text-[#bbbbbb] hover:text-white hover:translate-x-2"
                  }
                `}
              >
                {cat}
              </button>
            ))}
          </nav>
        </SimpleBar>
      </aside>
    </div>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/context/CartContext.jsx ===
// src/context/CartContext.jsx
"use client";
import React, { createContext, useReducer, useContext, useEffect } from "react";

const CartContext = createContext();

const initialState = { items: [] };

function cartReducer(state, action) {
  switch (action.type) {
    case "INIT":
      return action.payload;
    case "ADD_ITEM": {
      const { sku, quantity, ...rest } = action.payload;
      const exists = state.items.find((item) => item.sku === sku);
      if (exists) {
        return {
          items: state.items.map((item) =>
            item.sku === sku
              ? { ...item, quantity: item.quantity + quantity }
              : item
          ),
        };
      }
      return { items: [...state.items, { sku, quantity, ...rest }] };
    }
    case "REMOVE_ITEM":
      return {
        items: state.items.filter((item) => item.sku !== action.payload.sku),
      };
    case "CLEAR_CART":
      return { items: [] };
    default:
      return state;
  }
}

export function CartProvider({ children }) {
  const [state, dispatch] = useReducer(cartReducer, initialState);

  // inicializa do localStorage
  useEffect(() => {
    const stored = localStorage.getItem("cart");
    if (stored) dispatch({ type: "INIT", payload: JSON.parse(stored) });
  }, []);

  // persiste no localStorage
  useEffect(() => {
    localStorage.setItem("cart", JSON.stringify(state));
  }, [state]);

  const addItem = (item) => dispatch({ type: "ADD_ITEM", payload: item });
  const removeItem = (sku) =>
    dispatch({ type: "REMOVE_ITEM", payload: { sku } });
  const clearCart = () => dispatch({ type: "CLEAR_CART" });

  // Calcular o total dos itens
  const total = state.items.reduce(
    (acc, item) => acc + item.price * item.quantity,
    0
  );

  return (
    <CartContext.Provider
      value={{ items: state.items, addItem, removeItem, clearCart, total }} // Total √© agora acess√≠vel diretamente
    >
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  return useContext(CartContext);
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/context/NotificationsContext.jsx ===
// src/context/NotificationsContext.jsx
"use client";

import React, { createContext, useContext, useState } from "react";

const NotificationsContext = createContext();

export function NotificationsProvider({ children }) {
  const [notifications, setNotifications] = useState([]);

  const addNotification = (text) =>
    setNotifications((prev) => [...prev, { id: Date.now(), text }]);

  const clearNotifications = () => setNotifications([]);

  return (
    <NotificationsContext.Provider
      value={{ notifications, addNotification, clearNotifications }}
    >
      {children}
    </NotificationsContext.Provider>
  );
}

export const useNotifications = () => useContext(NotificationsContext);

=== /home/ikemh/projetos/my-ecommerce/frontend/src/context/ProductSelectContext.js ===
// src/context/ProductSelectionContext.js
"use client";

import React, { createContext, useContext, useState } from "react";

// Criando o contexto
const ProductSelectionContext = createContext();

// Hook personalizado para facilitar o uso do contexto
export function useProductSelection() {
  return useContext(ProductSelectionContext);
}

// Provedor do contexto
export function ProductSelectionProvider({ children }) {
  const [selectedVariants, setSelectedVariants] = useState([]);

  // Adiciona uma variante √† sele√ß√£o
  const addVariant = (variantId) => {
    setSelectedVariants((prev) => {
      if (!prev.includes(variantId)) {
        return [...prev, variantId];
      }
      return prev;
    });
  };

  // Remove uma variante da sele√ß√£o
  const removeVariant = (variantId) => {
    setSelectedVariants((prev) => prev.filter((id) => id !== variantId));
  };

  // Verifica se h√° variantes selecionadas
  const hasSelectedVariants = () => {
    return selectedVariants.length > 0;
  };

  // Valor do contexto
  const value = {
    selectedVariants,
    addVariant,
    removeVariant,
    hasSelectedVariants,
  };

  return (
    <ProductSelectionContext.Provider value={value}>
      {children}
    </ProductSelectionContext.Provider>
  );
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

@import "simplebar/dist/simplebar.min.css";

.simplebar-track.simplebar-vertical {
  width: 6px;
}
.simplebar-scrollbar:before {
  background-color: #999;
  border-radius: 3px;
}
.simplebar-track.simplebar-vertical .simplebar-scrollbar:before {
  opacity: 1;
}

::selection {
  background: #000000;
  color: #ffffff;
}

::-moz-selection {
  background: #000000;
  color: #ffffff;
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/hooks/useCategories.js ===
import { useState, useEffect } from "react";

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export default function useCategories(pageSize = 100) {
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState("");
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!apiUrl) {
      const msg = "‚ùå NEXT_PUBLIC_API_URL n√£o est√° definida";
      console.error(msg);
      setError(msg);
      return;
    }

    const url = `${apiUrl}/api/categorias?pagination[pageSize]=${pageSize}&sort=id:asc`;
    console.log("üîç Fetching categorias from:", url);

    fetch(url)
      .then((res) => {
        if (!res.ok) {
          throw new Error(`Erro HTTP ${res.status}`);
        }
        return res.json();
      })
      .then((j) => {
        const cats = j.data.map((c) => c.nome);
        setCategories(cats);
        if (cats.length > 0) setSelectedCategory(cats[0]);
        setError(null);
      })
      .catch((e) => {
        console.error("‚ùå Erro ao buscar categorias:", e);
        setError(e.message || "Erro desconhecido");
      });
  }, [pageSize]);

  return { categories, selectedCategory, setSelectedCategory, error };
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/hooks/useNotifications.js ===
// src/hooks/useNotifications.js
"use client";

import { useState, useCallback } from "react";

export function useNotifications(max = 7) {
  const [list, setList] = useState([]);

  const add = useCallback(
    (text) => {
      setList((prev) => {
        const newNotification = {
          // gera um UUID nativo (fallback para timestamp+random se n√£o suportado)
          id:
            typeof crypto !== "undefined" && crypto.randomUUID
              ? crypto.randomUUID()
              : `${Date.now()}-${Math.random()}`,
          text,
        };
        return [...prev, newNotification].slice(-max);
      });
    },
    [max]
  );

  const clear = useCallback(() => setList([]), []);

  return { list, add, clear };
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/hooks/usePhoneInput.js ===
// hooks/usePhoneInput.js
import { useState, useRef, useEffect } from "react";
import {
  initPhoneInput,
  validatePhoneBR,
} from "@/components/CheckoutLayout/utils/phoneUtils";

export function usePhoneInput(onChange) {
  const ref = useRef(null);
  const [valid, setValid] = useState(null);

  useEffect(() => {
    if (!ref.current) return;
    const cleanup = initPhoneInput(ref, onChange);
    return cleanup;
  }, [onChange]);

  useEffect(() => {
    const val = ref.current?.value || "";
    setValid(validatePhoneBR(val).valid);
  }, [ref.current?.value]);

  return { ref, valid };
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/hooks/useProducts.js ===
import { useRef, useCallback, useEffect } from "react";
import useSWRInfinite from "swr/infinite";
import { fetcher } from "@/lib/fetcher";

const PAGE_SIZE = 12;
const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export default function useProducts(selectedCategory) {
  const getKey = (pageIndex, previousPage) => {
    if (!selectedCategory) return null;
    if (previousPage && previousPage.data.length < PAGE_SIZE) return null;
    return (
      `${apiUrl}/api/produtos?populate=*&` +
      `filters[categoria][nome][$eq]=${encodeURIComponent(selectedCategory)}` +
      `&sort=id:asc&pagination[page]=${pageIndex + 1}` +
      `&pagination[pageSize]=${PAGE_SIZE}`
    );
  };

  const { data, size, setSize, isValidating, error } = useSWRInfinite(
    getKey,
    fetcher
  );

  const products = data
    ? data.flatMap((page) =>
        page.data.map((p) => ({
          id: p.id,
          title: p.title,
          imageUrl: p.image?.url || p.image?.formats?.medium?.url || "",
          variants: p.variants.map((v) => ({
            sku: v.sku,
            material: v.material,
            price: v.price,
          })),
        }))
      )
    : [];

  const isReachingEnd = data && data[data.length - 1].data.length < PAGE_SIZE;

  const observer = useRef();
  const lastRef = useCallback(
    (node) => {
      if (isValidating || isReachingEnd) return;
      if (observer.current) observer.current.disconnect();
      observer.current = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
          setSize(size + 1);
        }
      });
      if (node) observer.current.observe(node);
    },
    [isValidating, isReachingEnd, size, setSize]
  );

  useEffect(() => {
    if (selectedCategory) setSize(1);
  }, [selectedCategory]);

  return {
    products,
    lastRef,
    isValidating,
    isReachingEnd,
    error,
  };
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/hooks/useValidation.js ===

=== /home/ikemh/projetos/my-ecommerce/frontend/src/lib/fetcher.js ===
export const fetcher = (url) => fetch(url).then((res) => res.json());

=== /home/ikemh/projetos/my-ecommerce/frontend/src/lib/googleSheets.js ===
// src/lib/googleSheets.js
import { google } from "googleapis";
import { OAuth2Client } from "google-auth-library";

const auth = new OAuth2Client({
  email: process.env.GOOGLE_CLIENT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const sheets = google.sheets({ version: "v4", auth });

export async function appendToSheet(data) {
  const spreadsheetId = process.env.GOOGLE_SHEET_ID;
  const range = "Sheet1!A1"; // Alterar conforme a necessidade
  const valueInputOption = "RAW";

  const resource = {
    values: [data],
  };

  try {
    const response = await sheets.spreadsheets.values.append({
      spreadsheetId,
      range,
      valueInputOption,
      resource,
    });
    return response.data;
  } catch (error) {
    console.error("Error appending to sheet:", error);
    throw new Error("Failed to append data to Google Sheets");
  }
}

=== /home/ikemh/projetos/my-ecommerce/frontend/src/output.txt ===
=== ./app/checkout/page.jsx ===
// src/app/checkout/page.jsx

"use client";
import React, { useState } from "react";
import { useCart } from "@/context/CartContext";
import { useRouter } from "next/navigation";
import CheckoutLayout from "@/components/CheckoutLayout/CheckoutLayout";

export default function CheckoutPage() {
  const { items, clearCart } = useCart();
  const router = useRouter();

  const [customer, setCustomer] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [loading, setLoading] = useState(false);

  // Fun√ß√µes para atualizar os valores dos estados
  const handleCustomerChange = (value) => setCustomer(value);
  const handleEmailChange = (value) => setEmail(value);
  const handlePhoneChange = (value) => setPhone(value);

  // C√°lculo do total
  const total = items.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0
  );

  const handleSubmit = async (orderData) => {
    setLoading(true);

    try {
      const res = await fetch("/api/submitOrder", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderData),
      });
      const result = await res.json();
      alert(result.message);
      clearCart(); // Limpa o carrinho ap√≥s sucesso
      router.push("/success"); // Redireciona para p√°gina de sucesso
    } catch (error) {
      alert("Erro ao enviar pedido.");
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <CheckoutLayout
      items={items}
      total={total}
      customer={customer}
      email={email}
      phone={phone}
      loading={loading}
      onCustomerChange={handleCustomerChange}
      onEmailChange={handleEmailChange}
      onPhoneChange={handlePhoneChange}
      onSubmit={handleSubmit} // Passando a fun√ß√£o de submit para o CheckoutLayout
    />
  );
}

=== ./app/success/page.jsx ===
export default function SuccessPage() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center text-white bg-[#202020]">
      <h1 className="text-3xl mb-4">Pedido enviado com sucesso!</h1>
      <p>Em breve entraremos em contato via WhatsApp.</p>
    </div>
  );
}

=== ./components/ProductsSection.jsx ===
"use client";
import React from "react";
import useProducts from "@/hooks/useProducts";
import ProductCard from "./ProductCard/ProductCard";
import { ArrowBigUpDash } from "lucide-react";

export default function ProductsSection({ selectedCategory }) {
  const { products, lastRef, isValidating, isReachingEnd, error } =
    useProducts(selectedCategory);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  return (
    <section className="bg-[#252525] bg-opacity-90 backdrop-blur-sm rounded-xl p-2 sm:p-6 shadow-lg">
      <div className="grid grid-cols-1 [@media_(min-width:857px)]:grid-cols-2 gap-6">
        {products.map((product, idx) => (
          <ProductCard
            key={product.id}
            product={product}
            observeRef={idx === products.length - 1 ? lastRef : null}
          />
        ))}
      </div>

      {isValidating && (
        <p className="text-center text-gray-500 mt-20 h-[50vh] text-6xl select-none">
          ‚ü≥
        </p>
      )}

      {isReachingEnd && !isValidating && (
        <button
          onClick={scrollToTop}
          aria-label="Voltar ao topo"
          className="flex items-center cursor-pointer h-[100%] justify-center mt-8 mx-auto border rounded-lg p-2 text-gray-500 select-none"
        >
          <span className="text-base font-bold text-lg mr-1">
            Voltar ao topo
          </span>
          <ArrowBigUpDash className="h-6 w-6" />
        </button>
      )}

      {error && (
        <p className="text-red-400 text-center mt-20 h-[50vh] text-2xl select-none cursor-pointer">
          Oops, algo deu errado.
        </p>
      )}
    </section>
  );
}

=== ./components/CategoriesNav.jsx ===
"use client";
import React from "react";

export default function CategoriesNav({
  categories,
  selectedCategory,
  onSelectCategory,
}) {
  return (
    <nav className="hidden md:block fixed top-1/3 right-6 bg-[#1A1A1A] bg-opacity-80 p-4 rounded-lg shadow-lg z-50">
      <ul className="space-y-2">
        {categories.map((cat) => (
          <li key={cat}>
            <button
              onClick={() => onSelectCategory(cat)}
              className={`text-sm ${
                cat === selectedCategory
                  ? "text-white font-bold"
                  : "text-[#B3B3B3] hover:text-white"
              }`}
            >
              {cat}
            </button>
          </li>
        ))}
      </ul>
    </nav>
  );
}

=== ./components/NavBar.jsx ===
// src/components/NavBar.jsx
"use client";
import React from "react";
import { Sidebar, ShoppingCart } from "lucide-react";
import { useCart } from "@/context/CartContext";

export default function NavBar({ onToggleDrawer, onToggleCart }) {
  const { items } = useCart();
  // soma todas as quantidades
  const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);

  return (
    <header className="fixed grid min-h-[5vw] grid-cols-3 items-center justify-items-center top-0 left-0 right-0 bg-[#1A1A1A]/70 backdrop-blur-lg border-b border-white/10 px-[2vw] z-50 select-none">
      {/* √çndice */}
      <div className="col-span-1 h-[100%]  justify-self-start">
        <button
          onClick={onToggleDrawer}
          aria-label="Abrir menu"
          className="flex items-center cursor-pointer  h-[100%]"
        >
          <Sidebar className="h-[auto] w-[clamp(5vh,3rem,5vh)]" />
          <span className="ml-[max(0.2rem,1vw)] text-sm font-bold md:text-[clamp(3vh,2rem,3vh)] ">
            √çndice
          </span>
        </button>
      </div>

      {/* Logo */}
      <div className="col-span-1 text-center justify-self-center ">
        <img
          src="/logo.png"
          alt="Logo do site"
          className="w-auto inline-block md:h-[clamp(9vh,5rem,9vh)]"
        />
      </div>

      {/* Carrinho */}
      <div className="col-span-1 flex justify-self-end h-[100%] max-h-[3rem]">
        <button
          onClick={onToggleCart}
          aria-label="Ver carrinho"
          className="relative flex items-center cursor-pointer h-[100%] pl-[4rem] py-6"
        >
          <span className="hidden md:inline mr-[1vw] text-[clamp(3vh,2rem,3vh)] font-bold">
            Carrinho
          </span>
          <div className="relative">
            <ShoppingCart className="h-[auto] w-[clamp(5vh,3rem,5vh)] text-white" />
            {totalQuantity > 0 && (
              <span
                className="
                  absolute -top-[1vh] -right-[1vh]
                  bg-[#D4AF37] text-[#1a1a1a] text-[clamp(2vh,1.5rem,2vh)] font-bold
                  rounded-full h-[auto] w-[clamp(3vh,2rem,3vh)] flex items-center justify-center
                "
              >
                {totalQuantity}
              </span>
            )}
          </div>
        </button>
      </div>
    </header>
  );
}

=== ./components/SideDrawer.jsx ===
// SideDrawer.jsx
"use client";
import React from "react";
import SimpleBar from "simplebar-react";
import "simplebar-react/dist/simplebar.min.css";

export default function SideDrawer({
  isOpen,
  onClose,
  categories,
  selectedCategory,
  setSelectedCategory,
}) {
  return (
    <div
      className={`z-40 fixed inset-0 ${isOpen ? "" : "pointer-events-none"}`}
      onClick={onClose}
    >
      <aside
        onClick={(e) => e.stopPropagation()}
        className={`
          fixed top-[8vh] left-0
          h-[100%] w-30 min-w-[25vh] max-w-[10rem] 
          bg-[#1A1A1A]/70 backdrop-blur-lg
          border-r border-white/10
          origin-left transform transition-transform duration-350 md:top-[10vh] min-w-[30vh]
          ${isOpen ? "scale-x-100" : "scale-x-0"}
        `}
      >
        <button
          onClick={onClose}
          aria-label="Fechar menu"
          className="cursor-pointer absolute top-[1vh] right-[1vh] text-white text-[4vh] focus:outline-none"
        >
          √ó
        </button>

        <SimpleBar
          style={{ maxHeight: "100%" }}
          className="mt-[6vh] pl-[1vh] pr-[3vh] pb-[20vh] scroll-smooth font-roboto"
        >
          <nav className="space-y-[0.5vh] ">
            {categories.map((cat) => (
              <button
                key={cat}
                onClick={() => {
                  setSelectedCategory(cat);
                  onClose();
                }}
                className={`
                  w-full h-[6vh] text-left py-[1vh] pl-[1vh] text-[2.5vh]
                  cursor-pointer
                  border-b-[0.1vh] border-[#60606050] last:border-none
                  transition-transform duration-200
                  ${
                    cat === selectedCategory
                      ? "bg-[#D4AF37]  font-bold text-[#1a1a1a]"
                      : "text-[#bbbbbb] hover:text-white hover:translate-x-2"
                  }
                `}
              >
                {cat}
              </button>
            ))}
          </nav>
        </SimpleBar>
      </aside>
    </div>
  );
}

=== ./components/FullHoverZoom.jsx ===
"use client";
import React, { useState, useRef } from "react";
import Image from "next/image";

export default function FullHoverZoom({ src, alt, zoom = 2 }) {
  const [zoomed, setZoomed] = useState(false);
  const [origin, setOrigin] = useState({ x: 50, y: 50 });
  const containerRef = useRef(null);

  const handleMouseMove = (e) => {
    const rect = containerRef.current.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    setOrigin({ x, y });
  };

  return (
    <div
      ref={containerRef}
      className="relative w-full aspect-[1000/400] overflow-hidden cursor-zoom-in rounded-lg"
      onMouseEnter={() => setZoomed(true)}
      onMouseMove={(e) => zoomed && handleMouseMove(e)}
      onMouseLeave={() => setZoomed(false)}
    >
      <Image
        src={src}
        alt={alt}
        fill
        className="object-cover rounded-lg"
        style={{
          transform: zoomed ? `scale(${zoom})` : "scale(1)",
          transformOrigin: `${origin.x}% ${origin.y}%`,
          transition: "transform 1s ease",
        }}
      />
    </div>
  );
}

=== ./components/ProductCard/ProductCard.jsx ===
// src/components/ProductCard/ProductCard.jsx
"use client";

import React, { useState } from "react";
import ImageZoom from "./ImageZoom";
import VariantsTable from "./VariantsTable";
import AddToCartButton from "./AddToCartButton";
import { useCart } from "@/context/CartContext";

export default function ProductCard({ product, observeRef }) {
  const [selectedVariants, setSelectedVariants] = useState([]);
  const [quantities, setQuantities] = useState(() =>
    product.variants.reduce((acc, v) => ({ ...acc, [v.sku]: 0 }), {})
  );
  const { addItem } = useCart();

  const toggleVariant = (sku) =>
    setSelectedVariants((prev) =>
      prev.includes(sku) ? prev.filter((s) => s !== sku) : [...prev, sku]
    );

  const changeQuantity = (sku, val) =>
    setQuantities((prev) => ({ ...prev, [sku]: val }));

  const handleAddToCart = () => {
    selectedVariants.forEach((sku) => {
      const qty = quantities[sku];
      if (qty <= 0) return;
      const variant = product.variants.find((v) => v.sku === sku);
      addItem({
        id: product.id,
        sku,
        title: product.title,
        price: variant.price,
        quantity: qty,
        image: product.imageUrl,
        material: variant.material,
      });
    });

    setSelectedVariants([]);
  };
  const isDisabled =
    selectedVariants.filter((sku) => quantities[sku] > 0).length === 0;

  return (
    <div
      ref={observeRef}
      className="
        select-none bg-[#1a1a1a] border border-[#2a2a2a] rounded-2xl shadow-lg
        w-full max-w-full sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl
        mx-auto p-3 sm:p-6 flex flex-col gap-2 sm:gap-3
      "
    >
      {product.imageUrl && (
        <ImageZoom src={product.imageUrl} alt={product.title} zoom={2} />
      )}

      <h2 className="text-base sm:text-xl font-semibold text-white text-center whitespace-nowrap">
        {product.title}
      </h2>

      <VariantsTable
        variants={product.variants}
        selectedVariants={selectedVariants}
        toggleVariant={toggleVariant}
        quantities={quantities}
        changeQuantity={changeQuantity}
      />

      <AddToCartButton onClick={handleAddToCart} disabled={isDisabled} />
    </div>
  );
}

=== ./components/ProductCard/ImageZoom.jsx ===
"use client";
import React from "react";
import { PhotoProvider, PhotoView } from "react-photo-view";
import "react-photo-view/dist/react-photo-view.css";
import FullHoverZoom from "../FullHoverZoom";
import ZoomToolbar from "./ZoomToolbar";

export default function ImageZoom({ src, alt, zoom }) {
  return (
    <PhotoProvider
      maskOpacity={0.3}
      maskClassName="bg-black bg-opacity-30 backdrop-blur-sm"
      toolbarRender={ZoomToolbar}
    >
      <PhotoView src={src} key={src}>
        <div className="cursor-zoom-in">
          <FullHoverZoom src={src} alt={alt} zoom={zoom} />
        </div>
      </PhotoView>
    </PhotoProvider>
  );
}

=== ./components/ProductCard/ZoomToolbar.jsx ===
import React from "react";

export default function ZoomToolbar({ scale, onScale, onClose }) {
  return (
    <div
      className="
      fixed bottom-8
      left-1/2 transform -translate-x-1/2
      flex space-x-2 md:space-x-4 z-50
    "
    >
      <button
        onClick={() => onScale(scale - 0.2)}
        className="
          w-12 h-12
          bg-[#000000] hover:bg-[#303030]
          text-white text-base text-lg
          rounded-full shadow-md
        "
      >
        ‚àí
      </button>
      <button
        onClick={() => onScale(scale + 0.2)}
        className="
          w-12 h-12
          bg-[#000000] hover:bg-[#303030]
          text-white text-base text-lg
          rounded-full shadow-md
        "
      >
        +
      </button>
      <button
        onClick={onClose}
        className="
          w-12 h-12
          bg-red-400 hover:bg-red-500
          text-white text-base text-lg
          rounded-full shadow-md
        "
      >
        √ó
      </button>
    </div>
  );
}

=== ./components/ProductCard/VariantsTable.jsx ===
import React from "react";
import VariantRow from "./VariantRow";

export default function VariantsTable({
  variants,
  selectedVariants,
  toggleVariant,
  quantities,
  changeQuantity,
}) {
  return (
    <div className="overflow-hidden rounded-lg border border-[#00000040]">
      <table
        className="
          w-full
          text-[#B3B3B3]
          table-auto
          border-separate border-spacing-0
        "
      >
        <thead className="bg-[#2A2A2A]">
          <tr>
            <th className="w-[5%] px-2 py-0 text-center text-md font-bold" />
            <th className="w-[40%] px-2 py-0 text-left text-md font-bold">
              Material
            </th>
            <th className="w-[25%] px-2 py-0 text-left text-md font-bold">
              Pre√ßo
            </th>
            <th className="w-[20%] px-2 py-0 text-center text-md font-bold">
              Qtde.
            </th>
          </tr>
        </thead>
        <tbody>
          {variants.map((v, i) => (
            <VariantRow
              key={v.sku}
              variant={v}
              checked={selectedVariants.includes(v.sku)}
              toggle={() => toggleVariant(v.sku)}
              quantity={quantities[v.sku]}
              onQuantityChange={(val) => changeQuantity(v.sku, val)}
              // adiciona classes especiais no √∫ltimo row para garantir os cantos
              className={`
                ${i % 2 === 0 ? "bg-[#1E1E1E]" : ""}
                ${i === variants.length - 1 ? "last:rounded-bl-lg last:rounded-br-lg" : ""}
              `}
            />
          ))}
        </tbody>
      </table>
    </div>
  );
}

=== ./components/ProductCard/VariantRow.jsx ===
// src/components/ProductCard/VariantRow.jsx
import React from "react";

export default function VariantRow({
  variant,
  checked,
  toggle,
  quantity,
  onQuantityChange,
}) {
  const handleToggle = () => {
    if (!checked && quantity === 0) {
      onQuantityChange(1);
    }
    toggle();
  };

  const handleQtyChange = (raw) => {
    // s√≥ d√≠gitos, at√© 3 chars
    const digits = String(raw).replace(/\D/g, "").slice(0, 3);
    // remove zeros √† esquerda, mas deixa "0" se tudo for zero
    const clean = digits.replace(/^0+/, "") || "0";
    const num = Math.min(999, parseInt(clean, 10));
    onQuantityChange(num);
    // apenas ativa o checkbox se quantidade > 0
    if (num > 0 && !checked) toggle();
    if (num === 0 && checked) toggle(); // Se quantidade = 0 e checkbox marcado, desmarca
  };

  const decrement = () => handleQtyChange(quantity - 1);
  const increment = () => handleQtyChange(quantity + 1);
  const handleInput = (e) => handleQtyChange(e.target.value);

  // ajusta font-size conforme d√≠gitos
  const len = String(quantity).length;
  const fontSize = len === 1 ? "1rem" : len === 2 ? "0.9rem" : "0.8rem";

  return (
    <tr className="odd:bg-transparent even:bg-[#1f1f1f]">
      {/* Checkbox */}
      <td className="w-[10%] pt-2 pb-0 border-t border-[#00000040] text-center cursor-pointer">
        <input
          type="checkbox"
          checked={checked}
          onChange={handleToggle}
          className="h-6 w-6 accent-[#D4AF37] bg-[#1A1A1A] border border-[#00000040] rounded"
        />
      </td>

      {/* Material */}
      <td
        className="w-[45%] px-2 py-0 border-t border-[#00000040] text-left text-[#DADADA] font-bold cursor-pointer"
        onClick={handleToggle}
      >
        {variant.material}
      </td>

      {/* Pre√ßo */}
      <td className="w-[20%] px-2 py-0 border-t border-[#00000040] text-left text-[#EAEAEA]">
        R$ {variant.price.toFixed(2)}
      </td>

      {/* Quantidade */}
      <td className="w-[25%] px-2 py-0 border-t border-[#00000040] text-center">
        <div className="inline-flex items-center border border-[#00000040] bg-[#1A1A1A] rounded">
          <button
            type="button"
            onClick={decrement}
            disabled={quantity <= 0}
            className="
              h-6 w-6 flex items-center justify-center
              text-white font-bold rounded-none
              border-r border-[#2A2A2A] cursor-pointer
              disabled:opacity-10 disabled:hover:bg-[#1A1A1A] disabled:pointer-events-none
              hover:bg-[#3a3a3a] hover:rounded
            "
          >
            ‚Äì
          </button>

          <input
            type="text"
            inputMode="numeric"
            pattern="\d*"
            value={quantity}
            onChange={handleInput}
            maxLength={3}
            style={{ fontSize }}
            className={
              `w-8 h-6 bg-transparent text-center p-0 focus:outline-none focus:ring-2 focus:ring-yellow-400 ` +
              (quantity > 0 ? "text-[#DADADA]" : "text-[gray]/30")
            }
          />

          <button
            type="button"
            onClick={increment}
            disabled={quantity >= 999}
            className="
              h-6 w-6 flex items-center justify-center cursor-pointer
              text-white font-bold rounded-none
              border-l border-[#2A2A2A]
              disabled:opacity-50 disabled:cursor-not-allowed
              hover:bg-[#272727] hover:rounded
            "
          >
            +
          </button>
        </div>
      </td>
    </tr>
  );
}

=== ./components/ProductCard/AddToCartButton.jsx ===
// src/components/AddToCartButton.jsx
"use client";

import React, { useState } from "react";
import { ShoppingCart } from "lucide-react";
import CartChangeToast from "../CartChangeToast";

export default function AddToCartButton({ onClick, disabled }) {
  const [toast, setToast] = useState(null);

  const handleClick = () => {
    if (disabled) {
      setToast({ message: "Selecione algum produto!", type: "alert" });
      return;
    }
    if (onClick) onClick();
    setToast({ message: "Produto adicionado ao carrinho!", type: "success" });
  };

  return (
    <>
      <button
        type="button"
        onClick={handleClick}
        className={`
          mt-auto py-2 sm:py-3 px-3 sm:px-6
          bg-gradient-to-r from-[#D4AF37] to-[#A8760B]
          hover:from-[#CFAF37] hover:to-[#B8860B]
          text-[#1a1a1a] font-semibold rounded-xl shadow-md
          transition flex items-center justify-center space-x-2
          text-base sm:text-lg font-bold
          ${disabled ? "cursor-default" : "cursor-pointer"}
        `}
      >
        <ShoppingCart className="h-6 w-6" />
        <span>Adicionar ao carrinho</span>
      </button>

      {toast && (
        <CartChangeToast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </>
  );
}

=== ./components/CategoryCarousel/CategoryTitle.jsx ===
"use client";
import React, { useEffect, useRef } from "react";
import { Stardos_Stencil } from "next/font/google";
import { Anton } from "next/font/google";

const anton = Anton({ weight: "400", subsets: ["latin"] });
const stencil = Stardos_Stencil({ subsets: ["latin"], weight: "700" });

export default function CategoryTitle({
  categories,
  selectedCategory,
  onSelectCategory,
}) {
  const containerRef = useRef(null);
  const itemsRef = useRef([]);

  useEffect(() => {
    const c = containerRef.current;
    if (!c) return;
    c.style.scrollBehavior = "smooth";
    c.style.msOverflowStyle = "none";
    c.style.scrollbarWidth = "none";
  }, []);

  useEffect(() => {
    const c = containerRef.current;
    const idx = categories.indexOf(selectedCategory);
    const item = itemsRef.current[idx];
    if (c && item) {
      const cr = c.getBoundingClientRect();
      const ir = item.getBoundingClientRect();
      const offset = ir.left - cr.left - (cr.width / 2 - ir.width / 2);
      c.scrollBy({ left: offset, behavior: "smooth" });
    }
  }, [selectedCategory, categories]);

  const handleWheel = (e) => {
    e.preventDefault();
    containerRef.current?.scrollBy({ left: e.deltaY, behavior: "smooth" });
  };

  const handleKeyDown = (e) => {
    const idx = categories.indexOf(selectedCategory);
    if (e.key === "ArrowRight" && idx < categories.length - 1) {
      onSelectCategory(categories[idx + 1]);
    } else if (e.key === "ArrowLeft" && idx > 0) {
      onSelectCategory(categories[idx - 1]);
    }
  };

  return (
    <div className="flex flex-col items-center bg-[#1a1a1a] border-b  border-[#3A3A3A] pt-12 pb-8 select-none">
      {/* T√≠tulo com degrad√™ e contorno */}
      <h2
        className={`text-6xl ${anton.className} uppercase mb-6 pt-3 pb-3 text-[#fafafa] tracking-wide text-center`}
        style={{
          textShadow: `
      1px 5px 2px rgba(0,0,0,0.7),
      -1px 0 1px rgba(255,255,255,0.4),
      0 0 50px rgba(255,255,255,0.05)
    `,
        }}
      >
        CAT√ÅLOGO
        <br />
        <span className="block text-3xl text-[#D4AF37] font-normal tracking-normal leading-tight mt-1">
          2025
        </span>
      </h2>

      <div
        ref={containerRef}
        tabIndex={0}
        onWheel={handleWheel}
        onKeyDown={handleKeyDown}
        className="flex space-x-3 overflow-x-auto w-full px-4"
        style={{
          scrollbarWidth: "none",
          msOverflowStyle: "none",
        }}
      >
        {categories.map((cat, i) => {
          const isActive = cat === selectedCategory;
          return (
            <div
              key={cat}
              ref={(el) => (itemsRef.current[i] = el)}
              className={`relative flex-shrink-0 cursor-pointer transition-all duration-300 rounded-md min-w-[12rem] sm:min-w-[14rem] md:min-w-[15rem] ${
                isActive
                  ? "scale-100 opacity-90"
                  : "scale-95 opacity-75 hover:scale-100 hover:opacity-85"
              }`}
              onClick={() => onSelectCategory(cat)}
            >
              {/* Camada met√°lica com efeito 3D */}
              <div
                className={`absolute inset-0 rounded-xl ${
                  isActive ? "brightness-110" : ""
                }`}
                style={{
                  backgroundImage: `
                    linear-gradient(145deg, #d0d0d0, #909090),
                    repeating-linear-gradient(
                      45deg,
                      #c0c0c0 0px,
                      #e0e0e0 2px,
                      #c0c0c0 4px
                    )
                  `,
                  backgroundBlendMode: "overlay",
                  backgroundSize: "cover",
                  boxShadow: `
                    inset 2px 2px 5px rgba(255,255,255,0.5),
                    inset -2px -2px 5px rgba(0,0,0,5),
                    2px 2px 8px rgba(0,0,0,0.5)
                  `,
                }}
              />

              {/* Conte√∫do do bot√£o */}
              <div
                className={`relative z-10 px-6 py-3 border-3 text-center rounded-xl border transition-all duration-200 ${
                  isActive
                    ? "border-[#D4AF37] shadow-[0_0_10px_rgba(255,255,255,0.3)]"
                    : "border-[#ffffff]"
                } hover:shadow-[0_0_8px_rgba(255,255,255,0.2)]`}
              >
                <h2
                  className={`${stencil.className} text-base sm:text-lg md:text-xl uppercase font-extrabold text-transparent bg-clip-text`}
                  style={{
                    backgroundImage: `
                      repeating-linear-gradient(
                        135deg,
                        #a0a0a0 0px,
                        #d0d0d0 1px,
                        #a0a0a0 2px
                      ),
                      linear-gradient(135deg, rgba(2, 2, 2, 0.5), rgba(0,0,0,0.1))
                    `,
                    backgroundBlendMode: "overlay",
                    backgroundSize: "100% 2px, 200% 200%",
                  }}
                >
                  {cat}
                </h2>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

=== ./components/NotificationDialog.jsx ===
// src/components/NotificationDialog.jsx
"use client";

import React from "react";
import { createPortal } from "react-dom";
import { X } from "lucide-react";

export default function NotificationDialog({ notifications, clear }) {
  if (!notifications.length) return null;

  return createPortal(
    <div className="fixed bottom-20 w-80 left-1/2 transform -translate-x-1/2 z-50">
      <div className="max-w-md bg-[#1A1A1A]/70 backdrop-blur-lg text-white rounded-lg border border-white/20 shadow-lg overflow-hidden">
        {/* Cabe√ßalho fixo */}
        <div className="flex items-center justify-between px-4 py-2 border-b border-white/20">
          <span className="text-[1rem] font-semibold">
            ‚ö†Ô∏è &nbsp;Pedido M√≠nimo
          </span>
          <button onClick={clear} aria-label="Fechar" className="p-1">
            <X className="cursor-pointer h-6 w-6" />
          </button>
        </div>

        {/* Lista completa sempre vis√≠vel */}
        <div className="px-4 py-2 space-y-1 text-xs">
          {notifications.map((n, index) => (
            <div key={`${n.id}-${index}`} className="flex items-start">
              <span className="mr-2">‚Ä¢</span>
              <span className="flex-1">{n.text}</span>
            </div>
          ))}
          <div className="mt-2 text-yellow-300">
            * Apenas o material conta. Modelo n√£o interfere.
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
}

=== ./components/FloatingCheckoutButton.jsx ===
// src/components/FloatingCheckoutButton.jsx
"use client";

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useCart } from "@/context/CartContext";
import { useNotifications } from "@/hooks/useNotifications";
import NotificationDialog from "./NotificationDialog";

export default function FloatingCheckoutButton() {
  const router = useRouter();
  const { items } = useCart();
  const {
    list: notifications,
    add: addNotification,
    clear: clearNotifications,
  } = useNotifications(7);

  // Visibilidade do bot√£o
  const [visible, setVisible] = useState(false);
  useEffect(() => {
    setVisible(items.length > 0);
  }, [items.length]);

  // Agrupa quantidade por material (usado na valida√ß√£o)
  const totalsByMaterial = items.reduce((acc, item) => {
    acc[item.material] = (acc[item.material] || 0) + item.quantity;
    return acc;
  }, {});

  const handleCheckout = () => {
    clearNotifications();

    const shortages = Object.entries(totalsByMaterial)
      .filter(([_, qty]) => qty < 5)
      .map(([material, qty]) => ({ material, missing: 5 - qty }));

    if (shortages.length === 0) {
      router.push("/checkout");
    } else {
      shortages.forEach(({ material, missing }) =>
        addNotification(
          <>
            <div className="text-[0.9rem]">
              <span className="text-[#dadada]">
                Falta{missing > 1 ? "m" : ""}
              </span>{" "}
              <span className="font-bold">{missing}</span>{" "}
              <span className="text-[#dadada]">
                unidade
                {missing > 1 ? "s" : ""} de
              </span>{" "}
              <span className="font-bold">{material}</span>
            </div>
          </>
        )
      );
    }
  };

  useEffect(() => {
    if (notifications.length > 0) {
      clearNotifications();

      const shortages = Object.entries(totalsByMaterial)
        .filter(([_, qty]) => qty < 5)
        .map(([material, qty]) => ({ material, missing: 5 - qty }));

      shortages.forEach(({ material, missing }) =>
        addNotification(
          <>
            <div className="text-[0.9rem]">
              <span className="text-[#dadada]">
                Falta{missing > 1 ? "m" : ""}
              </span>{" "}
              <span className="font-bold">{missing}</span>{" "}
              <span className="text-[#dadada]">
                unidade
                {missing > 1 ? "s" : ""} de
              </span>{" "}
              <span className="font-bold">{material}</span>
            </div>
          </>
        )
      );
    }
  }, [items, clearNotifications, addNotification, notifications.length]);

  return (
    <>
      <div
        className={`
          fixed bottom-0 left-0 right-0
          grid grid-cols-12 items-center
          bg-[#1A1A1A]/70 backdrop-blur-lg
          h-[9vh]
          border-t border-white/10
          px-[3vh] py-[0] z-50
          transform transition-transform duration-500 ease-out
          ${visible ? "translate-y-0" : "translate-y-full"}
        `}
      >
        <div className="col-span-12 flex justify-center select-none">
          <button
            onClick={handleCheckout}
            className="
              bg-gradient-to-r from-[#0a0a0a] to-[#2a2a2a]
              hover:from-[#0a0a0a] hover:to-[#4a4a4a]
              text-[#D4AF37] text-[3vh] font-semibold
              py-[1vh] px-[4vh] rounded-[1.5vh] w-[40vh]
              cursor-pointer
              shadow-[0_0_0.4vh_#A8760B] hover:shadow-[0_0_2vh_#A8760B]
              transform transition-all duration-200
              hover:-translate-y-[0.05vh] active:translate-y-[0.05vh] active:scale-95
            "
            aria-label="Finalizar Pedido"
          >
            üî™ Finalizar Pedido!
          </button>
        </div>
      </div>

      <NotificationDialog
        notifications={notifications}
        clear={clearNotifications}
      />
    </>
  );
}

=== ./components/CartDrawer.jsx ===
"use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import SimpleBar from "simplebar-react";
import "simplebar-react/dist/simplebar.min.css";
import { X } from "lucide-react";
import { useCart } from "@/context/CartContext";
import CartChangeToast from "./CartChangeToast";

export default function CartDrawer({ isOpen, onClose }) {
  const router = useRouter();
  const { items, removeItem } = useCart();
  const [toast, setToast] = useState(null);

  // calcula subtotal
  const subtotal = items.reduce((sum, i) => sum + i.price * i.quantity, 0);

  const handleRemove = (sku) => {
    removeItem(sku);
    setToast({ message: "Produto removido do carrinho!", type: "error" });
  };

  return (
    <div
      className={`z-40 fixed inset-0 ${isOpen ? "" : "pointer-events-none"}`}
      onClick={onClose}
    >
      <style jsx global>{`
        .cart-scrollbar .simplebar-track.simplebar-vertical {
          right: auto !important;
          left: 0 !important;
        }
      `}</style>

      <aside
        onClick={(e) => e.stopPropagation()}
        className={`
          fixed top-[8vh] right-0
          h-[100%] w-65 min-w-[40vh] max-w-[10rem]
          bg-[#1A1A1A]/70 backdrop-blur-lg
          border-l border-white/10
          origin-right transform transition-transform duration-350 md:top-[10vh] min-w-[40vh]
          ${isOpen ? "translate-x-0" : "translate-x-full"}
        `}
      >
        {/* Bot√£o de fechar */}
        <button
          onClick={onClose}
          aria-label="Fechar carrinho"
          className="z-50 cursor-pointer absolute top-[1vh] left-[1vh] text-white text-[4vh] focus:outline-none"
        >
          √ó
        </button>
        {/* Conte√∫do rol√°vel com classe espec√≠fica */}
        <SimpleBar
          style={{ maxHeight: "100%" }}
          className="mt-[6vh] pl-[0.5vh] pb-[40vh] cart-scrollbar"
        >
          {items.length === 0 ? (
            <p className="pl-[3vh] pt-[3vh] text-[3.5vh] text-[#dadada]">
              Carrinho vazio.
            </p>
          ) : (
            <ul>
              {items.map((i, idx) => (
                <li
                  key={i.sku}
                  className={`
                    flex items-center justify-between px-[1vh] py-[0.5vh]
                    border-b border-[#60606070]
                    ${idx === items.length - 1 ? "border-none" : ""}
                  `}
                >
                  <img
                    src={i.image}
                    alt={i.title}
                    className="h-[5.5vh] w-auto object-contain rounded"
                  />
                  <div className="flex-1 ml-[2.1vh]">
                    <div className="font-semibold text-[2.3vh] text-white">
                      {i.title}
                    </div>
                    <div className="text-[2.1vh] text-[#DADADA]">
                      {i.material}
                    </div>
                    <div className="text-[2vh] text-white mt-[0.5vh]">
                      x{i.quantity} ¬∑ R$ {(i.price * i.quantity).toFixed(2)}
                    </div>
                  </div>
                  <button
                    onClick={() => handleRemove(i.sku)}
                    aria-label="Remover item"
                    className="text-red-400 hover:text-red-500/80 p-1 cursor-pointer"
                  >
                    <X className="h-[auto] w-[2.5vh]" />
                  </button>
                </li>
              ))}
            </ul>
          )}
        </SimpleBar>

        {items.length > 0 && (
          <div className="fixed pb-[22vh] bottom-0 left-0 w-full p-[2vh] bg-[#1A1A1A]/90 backdrop-blur-md z-60 border-t border-white/20">
            <div className="flex justify-between items-center text-[3vh] font-semibold text-white">
              <span>Subtotal:</span>
              <span>R$ {subtotal.toFixed(2)}</span>
            </div>
          </div>
        )}
      </aside>

      {toast && (
        <CartChangeToast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </div>
  );
}

=== ./components/CartChangeToast.jsx ===
// src/components/CartChangeToast.jsx
"use client";

import React, { useEffect } from "react";
import { createPortal } from "react-dom";

export default function CartChangeToast({
  message,
  type = "success",
  onClose,
}) {
  // fecha automaticamente ap√≥s 2s
  useEffect(() => {
    const t = setTimeout(onClose, 2000);
    return () => clearTimeout(t);
  }, [onClose]);

  // cores suaves
  const bgClass =
    type === "success"
      ? "bg-black/75 backdrop-blur-lg border-green-400/20 text-green-400/80"
      : type === "error"
        ? "bg-black/75 backdrop-blur-lg border-red-400/20 text-red-400/80"
        : "bg-black/75 backdrop-blur-lg border-yellow-400/20 text-yellow-400/85";

  return createPortal(
    <div className="fixed top-20 w-80 left-1/2 transform -translate-x-1/2 z-50">
      <div
        className={`
          max-w-md
          ${bgClass}
          backdrop-blur-lg
          rounded-lg
          border
          px-4 py-2
          shadow-lg
          text-center
          font-medium
        `}
      >
        {message}
      </div>
    </div>,
    document.body
  );
}

=== ./components/CheckoutLayout/CheckoutLayout.jsx ===
// src/components/CheckoutLayout.jsx

"use client";
import React from "react";
import Link from "next/link";
import { ArrowLeft } from "lucide-react";
import ProductSummary from "./ProductSummary";
import CustomerInfoForm from "./CustomerInfoForm";

export default function CheckoutLayout({
  items,
  total,
  customer,
  email,
  phone,
  loading,
  onCustomerChange,
  onEmailChange,
  onPhoneChange,
  onSubmit,
}) {
  return (
    <div className="min-h-screen bg-[#202020] text-white font-roboto antialiased">
      {/* Header fixo */}
      <header className="fixed top-0 left-0 right-0 px-4 py-3 grid grid-cols-12 items-center bg-[rgba(26,26,26,0.7)] backdrop-blur-lg z-30 border-b border-white/20">
        <div className="col-span-2 flex items-center">
          <Link
            href="/"
            aria-label="Voltar ao cat√°logo"
            className="flex items-center"
          >
            <ArrowLeft className="h-6 w-6 text-white mr-1" />
            <span className="text-white text-base font-bold">Cat√°logo</span>
          </Link>
        </div>
        <div className="col-span-8 text-center">
          <img
            src="/logo.png"
            alt="Logo do site"
            className="h-14 w-auto inline-block"
          />
        </div>
      </header>

      {/* Conte√∫do principal */}
      <main className="pt-30 pb-10 px-4 max-w-6xl mx-auto space-y-12 backdrop-blur-sm bg-[#252525] bg-opacity-90 min-h-[100vh] md:w-120">
        <ProductSummary items={items} total={total} />

        <CustomerInfoForm
          customer={customer}
          email={email}
          phone={phone}
          loading={loading}
          disableSubmit={items.length === 0}
          onCustomerChange={onCustomerChange}
          onEmailChange={onEmailChange}
          onPhoneChange={onPhoneChange}
          onSubmit={onSubmit}
        />
      </main>
    </div>
  );
}

=== ./components/CheckoutLayout/CustomerInfoForm.jsx ===
import React, { useState, useRef, useEffect } from "react";
import { useCart } from "@/context/CartContext";
import Script from "next/script";

import InputField from "./InputField";
import AddressSection from "./AddressSection";
import {
  initPhoneInput,
  validatePhoneBR,
} from "@/components/CheckoutLayout/utils/phoneUtils";
import { validateEmail } from "@/components/CheckoutLayout/utils/emailUtils";
import { fetchAddressByCEP } from "@/components/CheckoutLayout/utils/cepUtils";

export default function CustomerInfoForm({
  customer,
  email,
  phone,
  loading,
  onCustomerChange,
  onEmailChange,
  onPhoneChange,
  onSubmit,
}) {
  const { items } = useCart();
  const phoneRef = useRef(null);

  const [cep, setCep] = useState("");
  const [address, setAddress] = useState({
    street: "",
    neighborhood: "",
    city: "",
    state: "",
  });
  const [loadingCep, setLoadingCep] = useState(false);
  const [number, setNumber] = useState("");
  const [complement, setComplement] = useState("");
  const [phoneValid, setPhoneValid] = useState(null);
  const [cepValid, setCepValid] = useState(null);

  useEffect(() => {
    const value = phoneRef.current?.value || "";
    setPhoneValid(validatePhoneBR(value).valid);
  }, [phone]);

  useEffect(() => {
    if (!phoneRef.current) return;
    const cleanup = initPhoneInput(phoneRef, onPhoneChange);
    return cleanup;
  }, [onPhoneChange]);

  useEffect(() => {
    const sanitized = cep.replace(/\D/g, "");
    if (sanitized.length < 8) {
      setCepValid(false);
      return;
    }
    setLoadingCep(true);
    fetchAddressByCEP(sanitized)
      .then((res) => {
        setAddress(res);
        setCepValid(true);
      })
      .catch((err) => {
        alert(err.message);
        setAddress({ street: "", neighborhood: "", city: "", state: "" });
        setCepValid(false);
      })
      .finally(() => setLoadingCep(false));
  }, [cep]);

  const handleFormSubmit = (e) => {
    e.preventDefault();
    const trimmedName = customer.trim();
    if (trimmedName.length < 2) {
      alert("Nome deve ter pelo menos 2 letras.");
      return;
    }
    if (number.trim() === "") {
      alert("N√∫mero do endere√ßo n√£o pode ficar em branco.");
      return;
    }
    const emailCheck = validateEmail(email);
    if (!emailCheck.valid) {
      alert(emailCheck.reason);
      return;
    }
    const phoneVal = validatePhoneBR(phoneRef.current.value);
    if (!phoneVal.valid) {
      alert(phoneVal.reason);
      return;
    }
    const sanitizedCep = cep.replace(/\D/g, "");
    if (sanitizedCep.length !== 8) {
      alert("CEP deve conter 8 d√≠gitos.");
      return;
    }
    if (!address.street) {
      alert("Endere√ßo inv√°lido ou CEP n√£o encontrado.");
      return;
    }

    onPhoneChange(phoneVal.e164);

    onSubmit({
      customer,
      email,
      phone: phoneVal.e164,
      address: {
        street: address.street,
        neighborhood: address.neighborhood,
        city: address.city,
        state: address.state,
        number, // <‚Äì‚Äì aqui
        complement, // <‚Äì‚Äì e aqui
      },
      cartItems: items,
    });
  };

  return (
    <section className="bg-[#1E1E1E] bg-opacity-90 p-6 rounded-2xl border border-[#2A2A2A] shadow-inner">
      <Script
        src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
        strategy="afterInteractive"
      />
      <h2 className="uppercase tracking-wide text-2xl mb-4 text-[#DDDDDD]">
        Informa√ß√µes
      </h2>
      <form noValidate onSubmit={handleFormSubmit} className="space-y-6">
        <InputField
          label="Nome/Empresa"
          type="text"
          name="name"
          autoComplete="name"
          value={customer}
          onChange={(e) => onCustomerChange(e.target.value)}
          isValid={customer.trim().length >= 2}
          required
          minLength={2}
          placeholder="Jo√£o da Silva / Empresa XYZ"
        />
        <InputField
          label="E-mail"
          type="email"
          name="email"
          autoComplete="email"
          value={email}
          onChange={(e) => onEmailChange(e.target.value)}
          isValid={validateEmail(email).valid}
          required
          placeholder="joao@gmail.com"
        />

        <AddressSection
          cep={cep}
          setCep={setCep}
          cepValid={cepValid}
          loadingCep={loadingCep}
          address={address}
          number={number}
          setNumber={setNumber}
          complement={complement}
          setComplement={setComplement}
        />

        <InputField
          label="Celular"
          ref={phoneRef}
          type="tel"
          autoComplete="tel"
          defaultValue={phone}
          onChange={() => {}}
          isValid={phoneValid}
          required
          placeholder="(00) 00000-0000"
        />
        <button
          type="submit"
          disabled={loading}
          className="w-full py-3 text-lg font-semibold rounded-xl bg-gradient-to-r from-[#CFAF37] to-[#A8760B] hover:from-[#D4AF37] hover:to-[#B8860B] disabled:opacity-50 cursor-pointer disabled:cursor-not-allowed"
        >
          {loading
            ? "Enviando‚Ä¶"
            : loadingCep
              ? "Buscando CEP‚Ä¶"
              : "Finalizar Pedido"}
        </button>
      </form>
    </section>
  );
}

=== ./components/CheckoutLayout/ProductSummary.jsx ===
// src/components/ProductSummary.jsx
// Exibe lista de itens, totais e bot√µes de remo√ß√£o

import React from "react";
import { X } from "lucide-react";
import { useCart } from "@/context/CartContext";

export default function ProductSummary({ items, total }) {
  const { removeItem } = useCart();

  return (
    <section>
      <h1 className="uppercase tracking-wide text-3xl mb-6 text-[#DDDDDD] text-center">
        Resumo do Pedido
      </h1>

      {items.length === 0 ? (
        <p className="text-base text-[#AAAAAA]">Seu carrinho est√° vazio.</p>
      ) : (
        <ul>
          {items.map((i, idx) => (
            <li
              key={i.sku}
              className={`flex items-center justify-between p-4 rounded-lg ${
                idx % 2 === 0 ? "bg-[#1E1E1E]" : "bg-[#2A2A2A]"
              }`}
            >
              <img
                src={i.image}
                alt={i.title}
                className="h-12 w-auto object-contain rounded-md"
              />
              <div className="flex-1 ml-4">
                <div className="font-semibold text-base text-white">
                  {i.title}
                </div>
                <div className="text-sm text-[#B3B3B3]">{i.material}</div>
              </div>
              <div className="w-12 text-center text-white font-medium">
                {i.quantity}
              </div>
              <div className="w-24 text-right text-white font-medium">
                R$ {(i.price * i.quantity).toFixed(2)}
              </div>
              <button
                onClick={() => removeItem(i.sku)}
                aria-label="Remover item"
                className="ml-4 text-red-400 hover:text-red-600 p-1"
              >
                <X className="h-5 w-5" />
              </button>
            </li>
          ))}

          <li className="flex justify-between items-center mt-4 pt-4 border-t border-[rgba(255,255,255,0.3)]">
            <span className="font-semibold text-lg text-white">Total</span>
            <span className="font-semibold text-lg text-white">
              R$ {total.toFixed(2)}
            </span>
          </li>
        </ul>
      )}
    </section>
  );
}

=== ./components/CheckoutLayout/AddressSection.jsx ===
import React from "react";
import InputField from "./InputField";

export default function AddressSection({
  cep,
  setCep,
  cepValid,
  loadingCep,
  address,
  number,
  setNumber,
  complement,
  setComplement,
}) {
  return (
    <>
      <InputField
        label="CEP"
        type="text"
        name="postal-code"
        autoComplete="postal-code"
        value={cep.replace(/(\d{5})(\d{1,3})?/, (_, p1, p2) =>
          p2 ? `${p1}-${p2}` : p1
        )}
        onChange={(e) => setCep(e.target.value.replace(/\D/g, "").slice(0, 8))}
        isValid={cepValid}
        required
        maxLength={9}
        pattern="[0-9]{5}-[0-9]{3}"
        title="Digite um CEP no formato 00000-000"
        placeholder="00000-000"
      />

      {address.street && (
        <>
          <InputField
            label="Rua"
            value={address.street}
            readOnly
            className="text-[#bbb] font-bold pointer-events-none"
          />
          <InputField
            label="Bairro"
            value={address.neighborhood}
            readOnly
            className="text-[#AAAAAA] font-bold pointer-events-none"
          />
          <div className="grid grid-cols-2 gap-4">
            <InputField
              label="Cidade"
              value={address.city}
              readOnly
              className="text-[#AAAAAA] font-bold pointer-events-none"
            />
            <InputField
              label="UF"
              value={address.state}
              readOnly
              className="text-[#AAAAAA] font-bold pointer-events-none"
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <InputField
              label="N√∫mero"
              type="text"
              value={number}
              onChange={(e) => setNumber(e.target.value)}
              isValid={number.trim().length > 0}
              required
              placeholder="99"
            />
            <InputField
              label="Complemento"
              type="text"
              value={complement}
              onChange={(e) => setComplement(e.target.value)}
              showAsterisk={false}
              placeholder="Pavilh√£o Esquina"
            />
          </div>
        </>
      )}
    </>
  );
}

=== ./components/CheckoutLayout/InputField.jsx ===
import React, { useState, forwardRef } from "react";

const InputField = forwardRef(
  (
    {
      label,
      value,
      onChange,
      showAsterisk = true,
      isValid = null, // true | false | null (sem valida√ß√£o)
      className = "",
      ...props
    },
    ref
  ) => {
    const [touched, setTouched] = useState(false);
    const [focused, setFocused] = useState(false);

    const handleFocus = () => setFocused(true);
    const handleBlur = () => {
      setFocused(false);
      setTouched(true);
    };

    const baseClasses =
      "w-full p-3 rounded-xl focus:ring-2 focus:ring-[#D4AF37] placeholder-gray-400/13";
    const defaultState = "bg-[#1A1A1A] text-white border border-[#2A2A2A]";
    const validState =
      "bg-green-300/5 text-[#bbb] font-bold border border-green-500/20";
    const invalidState = "bg-red-300/5 border border-red-500/40";

    let stateClasses = defaultState;
    if (touched && !focused && isValid !== null) {
      stateClasses = isValid ? validState : invalidState;
    }

    return (
      <div>
        <label
          className={`block mb-2 text-sm text-[#DADADA] font-bold ${
            showAsterisk
              ? "after:content-['*'] after:ml-1 after:text-red-500/30"
              : "after:content-['(opcional)'] after:ml-1 after:text-[0.75rem] after:text-[#DADADA]/35"
          }`}
        >
          {label}
        </label>
        <input
          ref={ref}
          value={value}
          onChange={onChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={`${baseClasses} ${stateClasses} ${className}`}
          {...props}
        />
      </div>
    );
  }
);

export default InputField;

=== ./context/CartContext.jsx ===
// src/context/CartContext.jsx
"use client";
import React, { createContext, useReducer, useContext, useEffect } from "react";

const CartContext = createContext();

const initialState = { items: [] };

function cartReducer(state, action) {
  switch (action.type) {
    case "INIT":
      return action.payload;
    case "ADD_ITEM": {
      const { sku, quantity, ...rest } = action.payload;
      const exists = state.items.find((item) => item.sku === sku);
      if (exists) {
        return {
          items: state.items.map((item) =>
            item.sku === sku
              ? { ...item, quantity: item.quantity + quantity }
              : item
          ),
        };
      }
      return { items: [...state.items, { sku, quantity, ...rest }] };
    }
    case "REMOVE_ITEM":
      return {
        items: state.items.filter((item) => item.sku !== action.payload.sku),
      };
    case "CLEAR_CART":
      return { items: [] };
    default:
      return state;
  }
}

export function CartProvider({ children }) {
  const [state, dispatch] = useReducer(cartReducer, initialState);

  // inicializa do localStorage
  useEffect(() => {
    const stored = localStorage.getItem("cart");
    if (stored) dispatch({ type: "INIT", payload: JSON.parse(stored) });
  }, []);

  // persiste no localStorage
  useEffect(() => {
    localStorage.setItem("cart", JSON.stringify(state));
  }, [state]);

  const addItem = (item) => dispatch({ type: "ADD_ITEM", payload: item });
  const removeItem = (sku) =>
    dispatch({ type: "REMOVE_ITEM", payload: { sku } });
  const clearCart = () => dispatch({ type: "CLEAR_CART" });

  // Calcular o total dos itens
  const total = state.items.reduce(
    (acc, item) => acc + item.price * item.quantity,
    0
  );

  return (
    <CartContext.Provider
      value={{ items: state.items, addItem, removeItem, clearCart, total }} // Total √© agora acess√≠vel diretamente
    >
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  return useContext(CartContext);
}

=== ./context/NotificationsContext.jsx ===
// src/context/NotificationsContext.jsx
"use client";

import React, { createContext, useContext, useState } from "react";

const NotificationsContext = createContext();

export function NotificationsProvider({ children }) {
  const [notifications, setNotifications] = useState([]);

  const addNotification = (text) =>
    setNotifications((prev) => [...prev, { id: Date.now(), text }]);

  const clearNotifications = () => setNotifications([]);

  return (
    <NotificationsContext.Provider
      value={{ notifications, addNotification, clearNotifications }}
    >
      {children}
    </NotificationsContext.Provider>
  );
}

export const useNotifications = () => useContext(NotificationsContext);


=== /home/ikemh/projetos/my-ecommerce/frontend/src/todos_codigos.txt ===

